//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Gson.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Gson")
#ifdef RESTRICT_Gson
#define INCLUDE_ALL_Gson 0
#else
#define INCLUDE_ALL_Gson 1
#endif
#undef RESTRICT_Gson

#if !defined (GsonGson_) && (INCLUDE_ALL_Gson || defined(INCLUDE_GsonGson))
#define GsonGson_

@class GsonExcluder;
@class GsonGsonBuilder;
@class GsonJsonElement;
@class GsonJsonReader;
@class GsonJsonWriter;
@class GsonLongSerializationPolicy;
@class GsonTypeAdapter;
@class GsonTypeToken;
@class IOSClass;
@class JavaIoReader;
@class JavaIoWriter;
@protocol GsonFieldNamingStrategy;
@protocol GsonTypeAdapterFactory;
@protocol JavaLangAppendable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface GsonGson : NSObject {
 @public
  id<JavaUtilList> factories_;
  GsonExcluder *excluder_;
  id<GsonFieldNamingStrategy> fieldNamingStrategy_;
  id<JavaUtilMap> instanceCreators_;
  jboolean serializeNulls_;
  jboolean complexMapKeySerialization_;
  jboolean generateNonExecutableJson_;
  jboolean htmlSafe_;
  jboolean prettyPrinting_;
  jboolean lenient_;
  jboolean serializeSpecialFloatingPointValues_;
  NSString *datePattern_;
  jint dateStyle_;
  jint timeStyle_;
  GsonLongSerializationPolicy *longSerializationPolicy_;
  id<JavaUtilList> builderFactories_;
  id<JavaUtilList> builderHierarchyFactories_;
}

+ (jboolean)DEFAULT_JSON_NON_EXECUTABLE;

+ (jboolean)DEFAULT_LENIENT;

+ (jboolean)DEFAULT_PRETTY_PRINT;

+ (jboolean)DEFAULT_ESCAPE_HTML;

+ (jboolean)DEFAULT_SERIALIZE_NULLS;

+ (jboolean)DEFAULT_COMPLEX_MAP_KEYS;

+ (jboolean)DEFAULT_SPECIALIZE_FLOAT_VALUES;

#pragma mark Public

- (instancetype)init;

- (GsonExcluder *)excluder;

- (id<GsonFieldNamingStrategy>)fieldNamingStrategy;

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
                     withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
          withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithGsonJsonReader:(GsonJsonReader *)reader
         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
                  withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
       withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithNSString:(NSString *)json
              withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithNSString:(NSString *)json
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (GsonTypeAdapter *)getAdapterWithIOSClass:(IOSClass *)type;

- (GsonTypeAdapter *)getAdapterWithGsonTypeToken:(GsonTypeToken *)type;

- (GsonTypeAdapter *)getDelegateAdapterWithGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast
                                                withGsonTypeToken:(GsonTypeToken *)type;

- (jboolean)htmlSafe;

- (GsonGsonBuilder *)newBuilder OBJC_METHOD_FAMILY_NONE;

- (GsonJsonReader *)newJsonReaderWithJavaIoReader:(JavaIoReader *)reader OBJC_METHOD_FAMILY_NONE;

- (GsonJsonWriter *)newJsonWriterWithJavaIoWriter:(JavaIoWriter *)writer OBJC_METHOD_FAMILY_NONE;

- (jboolean)serializeNulls;

- (NSString *)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement;

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
           withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
               withGsonJsonWriter:(GsonJsonWriter *)writer;

- (NSString *)toJsonWithId:(id)src;

- (void)toJsonWithId:(id)src
withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (NSString *)toJsonWithId:(id)src
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
  withGsonJsonWriter:(GsonJsonWriter *)writer;

- (GsonJsonElement *)toJsonTreeWithId:(id)src;

- (GsonJsonElement *)toJsonTreeWithId:(id)src
              withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithGsonExcluder:(GsonExcluder *)excluder
         withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingStrategy
                     withJavaUtilMap:(id<JavaUtilMap>)instanceCreators
                         withBoolean:(jboolean)serializeNulls
                         withBoolean:(jboolean)complexMapKeySerialization
                         withBoolean:(jboolean)generateNonExecutableGson
                         withBoolean:(jboolean)htmlSafe
                         withBoolean:(jboolean)prettyPrinting
                         withBoolean:(jboolean)lenient
                         withBoolean:(jboolean)serializeSpecialFloatingPointValues
     withGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy
                        withNSString:(NSString *)datePattern
                             withInt:(jint)dateStyle
                             withInt:(jint)timeStyle
                    withJavaUtilList:(id<JavaUtilList>)builderFactories
                    withJavaUtilList:(id<JavaUtilList>)builderHierarchyFactories
                    withJavaUtilList:(id<JavaUtilList>)factoriesToBeAdded;

+ (void)checkValidFloatingPointWithDouble:(jdouble)value;

@end

J2OBJC_STATIC_INIT(GsonGson)

J2OBJC_FIELD_SETTER(GsonGson, factories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGson, excluder_, GsonExcluder *)
J2OBJC_FIELD_SETTER(GsonGson, fieldNamingStrategy_, id<GsonFieldNamingStrategy>)
J2OBJC_FIELD_SETTER(GsonGson, instanceCreators_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GsonGson, datePattern_, NSString *)
J2OBJC_FIELD_SETTER(GsonGson, longSerializationPolicy_, GsonLongSerializationPolicy *)
J2OBJC_FIELD_SETTER(GsonGson, builderFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGson, builderHierarchyFactories_, id<JavaUtilList>)

inline jboolean GsonGson_get_DEFAULT_JSON_NON_EXECUTABLE(void);
#define GsonGson_DEFAULT_JSON_NON_EXECUTABLE false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_JSON_NON_EXECUTABLE, jboolean)

inline jboolean GsonGson_get_DEFAULT_LENIENT(void);
#define GsonGson_DEFAULT_LENIENT false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_LENIENT, jboolean)

inline jboolean GsonGson_get_DEFAULT_PRETTY_PRINT(void);
#define GsonGson_DEFAULT_PRETTY_PRINT false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_PRETTY_PRINT, jboolean)

inline jboolean GsonGson_get_DEFAULT_ESCAPE_HTML(void);
#define GsonGson_DEFAULT_ESCAPE_HTML true
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_ESCAPE_HTML, jboolean)

inline jboolean GsonGson_get_DEFAULT_SERIALIZE_NULLS(void);
#define GsonGson_DEFAULT_SERIALIZE_NULLS false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_SERIALIZE_NULLS, jboolean)

inline jboolean GsonGson_get_DEFAULT_COMPLEX_MAP_KEYS(void);
#define GsonGson_DEFAULT_COMPLEX_MAP_KEYS false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_COMPLEX_MAP_KEYS, jboolean)

inline jboolean GsonGson_get_DEFAULT_SPECIALIZE_FLOAT_VALUES(void);
#define GsonGson_DEFAULT_SPECIALIZE_FLOAT_VALUES false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_SPECIALIZE_FLOAT_VALUES, jboolean)

FOUNDATION_EXPORT void GsonGson_init(GsonGson *self);

FOUNDATION_EXPORT GsonGson *new_GsonGson_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson *create_GsonGson_init(void);

FOUNDATION_EXPORT void GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GsonGson *self, GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded);

FOUNDATION_EXPORT GsonGson *new_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson *create_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withNSString_withInt_withInt_withJavaUtilList_withJavaUtilList_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> builderFactories, id<JavaUtilList> builderHierarchyFactories, id<JavaUtilList> factoriesToBeAdded);

FOUNDATION_EXPORT void GsonGson_checkValidFloatingPointWithDouble_(jdouble value);

J2OBJC_TYPE_LITERAL_HEADER(GsonGson)

@compatibility_alias ComGoogleGsonGson GsonGson;

#endif

#if !defined (GsonGson_FutureTypeAdapter_) && (INCLUDE_ALL_Gson || defined(INCLUDE_GsonGson_FutureTypeAdapter))
#define GsonGson_FutureTypeAdapter_

#define RESTRICT_TypeAdapter 1
#define INCLUDE_GsonTypeAdapter 1
#include "TypeAdapter.h"

@class GsonJsonReader;
@class GsonJsonWriter;

@interface GsonGson_FutureTypeAdapter : GsonTypeAdapter

#pragma mark Public

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)setDelegateWithGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_FutureTypeAdapter)

FOUNDATION_EXPORT void GsonGson_FutureTypeAdapter_init(GsonGson_FutureTypeAdapter *self);

FOUNDATION_EXPORT GsonGson_FutureTypeAdapter *new_GsonGson_FutureTypeAdapter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson_FutureTypeAdapter *create_GsonGson_FutureTypeAdapter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(GsonGson_FutureTypeAdapter)

#endif

#pragma pop_macro("INCLUDE_ALL_Gson")
