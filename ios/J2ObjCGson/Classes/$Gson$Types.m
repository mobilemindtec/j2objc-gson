//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/$Gson$Types.java
//

#include "$Gson$Preconditions.h"
#include "$Gson$Types.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/GenericArrayType.h"
#include "java/lang/reflect/GenericDeclaration.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/lang/reflect/WildcardType.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Properties.h"

@interface Gson_Gson_Types ()

- (instancetype)init;

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve
                                   withJavaUtilCollection:(id<JavaUtilCollection>)visitedTypeVariables;

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind;

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable;

@end

__attribute__((unused)) static void Gson_Gson_Types_init(Gson_Gson_Types *self);

__attribute__((unused)) static Gson_Gson_Types *new_Gson_Gson_Types_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static Gson_Gson_Types *create_Gson_Gson_Types_init(void);

__attribute__((unused)) static id<JavaLangReflectType> Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve, id<JavaUtilCollection> visitedTypeVariables);

__attribute__((unused)) static jint Gson_Gson_Types_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind);

__attribute__((unused)) static IOSClass *Gson_Gson_Types_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable);

@interface Gson_Gson_Types_ParameterizedTypeImpl : NSObject < JavaLangReflectParameterizedType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> ownerType_;
  id<JavaLangReflectType> rawType_;
  IOSObjectArray *typeArguments_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

- (IOSObjectArray *)getActualTypeArguments;

- (id<JavaLangReflectType>)getRawType;

- (id<JavaLangReflectType>)getOwnerType;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Gson_Gson_Types_ParameterizedTypeImpl)

J2OBJC_FIELD_SETTER(Gson_Gson_Types_ParameterizedTypeImpl, ownerType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Gson_Gson_Types_ParameterizedTypeImpl, rawType_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Gson_Gson_Types_ParameterizedTypeImpl, typeArguments_, IOSObjectArray *)

inline jlong Gson_Gson_Types_ParameterizedTypeImpl_get_serialVersionUID(void);
#define Gson_Gson_Types_ParameterizedTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(Gson_Gson_Types_ParameterizedTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(Gson_Gson_Types_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

__attribute__((unused)) static Gson_Gson_Types_ParameterizedTypeImpl *new_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) NS_RETURNS_RETAINED;

__attribute__((unused)) static Gson_Gson_Types_ParameterizedTypeImpl *create_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

J2OBJC_TYPE_LITERAL_HEADER(Gson_Gson_Types_ParameterizedTypeImpl)

@interface Gson_Gson_Types_GenericArrayTypeImpl : NSObject < JavaLangReflectGenericArrayType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> componentType_;
}

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

- (id<JavaLangReflectType>)getGenericComponentType;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Gson_Gson_Types_GenericArrayTypeImpl)

J2OBJC_FIELD_SETTER(Gson_Gson_Types_GenericArrayTypeImpl, componentType_, id<JavaLangReflectType>)

inline jlong Gson_Gson_Types_GenericArrayTypeImpl_get_serialVersionUID(void);
#define Gson_Gson_Types_GenericArrayTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(Gson_Gson_Types_GenericArrayTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(Gson_Gson_Types_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType);

__attribute__((unused)) static Gson_Gson_Types_GenericArrayTypeImpl *new_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) NS_RETURNS_RETAINED;

__attribute__((unused)) static Gson_Gson_Types_GenericArrayTypeImpl *create_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(Gson_Gson_Types_GenericArrayTypeImpl)

@interface Gson_Gson_Types_WildcardTypeImpl : NSObject < JavaLangReflectWildcardType, JavaIoSerializable > {
 @public
  id<JavaLangReflectType> upperBound_;
  id<JavaLangReflectType> lowerBound_;
}

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds;

- (IOSObjectArray *)getUpperBounds;

- (IOSObjectArray *)getLowerBounds;

- (jboolean)isEqual:(id)other;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(Gson_Gson_Types_WildcardTypeImpl)

J2OBJC_FIELD_SETTER(Gson_Gson_Types_WildcardTypeImpl, upperBound_, id<JavaLangReflectType>)
J2OBJC_FIELD_SETTER(Gson_Gson_Types_WildcardTypeImpl, lowerBound_, id<JavaLangReflectType>)

inline jlong Gson_Gson_Types_WildcardTypeImpl_get_serialVersionUID(void);
#define Gson_Gson_Types_WildcardTypeImpl_serialVersionUID 0LL
J2OBJC_STATIC_FIELD_CONSTANT(Gson_Gson_Types_WildcardTypeImpl, serialVersionUID, jlong)

__attribute__((unused)) static void Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(Gson_Gson_Types_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

__attribute__((unused)) static Gson_Gson_Types_WildcardTypeImpl *new_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) NS_RETURNS_RETAINED;

__attribute__((unused)) static Gson_Gson_Types_WildcardTypeImpl *create_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds);

J2OBJC_TYPE_LITERAL_HEADER(Gson_Gson_Types_WildcardTypeImpl)

J2OBJC_INITIALIZED_DEFN(Gson_Gson_Types)

IOSObjectArray *Gson_Gson_Types_EMPTY_TYPE_ARRAY;

@implementation Gson_Gson_Types

+ (IOSObjectArray *)EMPTY_TYPE_ARRAY {
  return Gson_Gson_Types_EMPTY_TYPE_ARRAY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  Gson_Gson_Types_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithOwnerWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                                                                     withJavaLangReflectType:(id<JavaLangReflectType>)rawType
                                                                withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  return Gson_Gson_Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ownerType, rawType, typeArguments);
}

+ (id<JavaLangReflectGenericArrayType>)arrayOfWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  return Gson_Gson_Types_arrayOfWithJavaLangReflectType_(componentType);
}

+ (id<JavaLangReflectWildcardType>)subtypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return Gson_Gson_Types_subtypeOfWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectWildcardType>)supertypeOfWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return Gson_Gson_Types_supertypeOfWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectType>)canonicalizeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(type);
}

+ (IOSClass *)getRawTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return Gson_Gson_Types_getRawTypeWithJavaLangReflectType_(type);
}

+ (jboolean)equalWithId:(id)a
                 withId:(id)b {
  return Gson_Gson_Types_equalWithId_withId_(a, b);
}

+ (jboolean)equalsWithJavaLangReflectType:(id<JavaLangReflectType>)a
                  withJavaLangReflectType:(id<JavaLangReflectType>)b {
  return Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(a, b);
}

+ (jint)hashCodeOrZeroWithId:(id)o {
  return Gson_Gson_Types_hashCodeOrZeroWithId_(o);
}

+ (NSString *)typeToStringWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return Gson_Gson_Types_typeToStringWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)getGenericSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)rawType
                                                         withIOSClass:(IOSClass *)toResolve {
  return Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, rawType, toResolve);
}

+ (id<JavaLangReflectType>)getSupertypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                  withIOSClass:(IOSClass *)contextRawType
                                                  withIOSClass:(IOSClass *)supertype {
  return Gson_Gson_Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype);
}

+ (id<JavaLangReflectType>)getArrayComponentTypeWithJavaLangReflectType:(id<JavaLangReflectType>)array {
  return Gson_Gson_Types_getArrayComponentTypeWithJavaLangReflectType_(array);
}

+ (id<JavaLangReflectType>)getCollectionElementTypeWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                              withIOSClass:(IOSClass *)contextRawType {
  return Gson_Gson_Types_getCollectionElementTypeWithJavaLangReflectType_withIOSClass_(context, contextRawType);
}

+ (IOSObjectArray *)getMapKeyAndValueTypesWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                     withIOSClass:(IOSClass *)contextRawType {
  return Gson_Gson_Types_getMapKeyAndValueTypesWithJavaLangReflectType_withIOSClass_(context, contextRawType);
}

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve {
  return Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, toResolve);
}

+ (id<JavaLangReflectType>)resolveWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                             withIOSClass:(IOSClass *)contextRawType
                                  withJavaLangReflectType:(id<JavaLangReflectType>)toResolve
                                   withJavaUtilCollection:(id<JavaUtilCollection>)visitedTypeVariables {
  return Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, toResolve, visitedTypeVariables);
}

+ (id<JavaLangReflectType>)resolveTypeVariableWithJavaLangReflectType:(id<JavaLangReflectType>)context
                                                         withIOSClass:(IOSClass *)contextRawType
                                      withJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)unknown {
  return Gson_Gson_Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, unknown);
}

+ (jint)indexOfWithNSObjectArray:(IOSObjectArray *)array
                          withId:(id)toFind {
  return Gson_Gson_Types_indexOfWithNSObjectArray_withId_(array, toFind);
}

+ (IOSClass *)declaringClassOfWithJavaLangReflectTypeVariable:(id<JavaLangReflectTypeVariable>)typeVariable {
  return Gson_Gson_Types_declaringClassOfWithJavaLangReflectTypeVariable_(typeVariable);
}

+ (void)checkNotPrimitiveWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  Gson_Gson_Types_checkNotPrimitiveWithJavaLangReflectType_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x89, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectGenericArrayType;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectWildcardType;", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectWildcardType;", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 7, 3, -1, 8, -1, -1 },
    { NULL, "Z", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 19, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 20, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 21, 22, -1, 23, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x9, 24, 22, -1, 25, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x9, 26, 27, -1, 28, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 26, 29, -1, 30, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 31, 32, -1, 33, -1, -1 },
    { NULL, "I", 0xa, 34, 35, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0xa, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x8, 39, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newParameterizedTypeWithOwnerWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:);
  methods[2].selector = @selector(arrayOfWithJavaLangReflectType:);
  methods[3].selector = @selector(subtypeOfWithJavaLangReflectType:);
  methods[4].selector = @selector(supertypeOfWithJavaLangReflectType:);
  methods[5].selector = @selector(canonicalizeWithJavaLangReflectType:);
  methods[6].selector = @selector(getRawTypeWithJavaLangReflectType:);
  methods[7].selector = @selector(equalWithId:withId:);
  methods[8].selector = @selector(equalsWithJavaLangReflectType:withJavaLangReflectType:);
  methods[9].selector = @selector(hashCodeOrZeroWithId:);
  methods[10].selector = @selector(typeToStringWithJavaLangReflectType:);
  methods[11].selector = @selector(getGenericSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[12].selector = @selector(getSupertypeWithJavaLangReflectType:withIOSClass:withIOSClass:);
  methods[13].selector = @selector(getArrayComponentTypeWithJavaLangReflectType:);
  methods[14].selector = @selector(getCollectionElementTypeWithJavaLangReflectType:withIOSClass:);
  methods[15].selector = @selector(getMapKeyAndValueTypesWithJavaLangReflectType:withIOSClass:);
  methods[16].selector = @selector(resolveWithJavaLangReflectType:withIOSClass:withJavaLangReflectType:);
  methods[17].selector = @selector(resolveWithJavaLangReflectType:withIOSClass:withJavaLangReflectType:withJavaUtilCollection:);
  methods[18].selector = @selector(resolveTypeVariableWithJavaLangReflectType:withIOSClass:withJavaLangReflectTypeVariable:);
  methods[19].selector = @selector(indexOfWithNSObjectArray:withId:);
  methods[20].selector = @selector(declaringClassOfWithJavaLangReflectTypeVariable:);
  methods[21].selector = @selector(checkNotPrimitiveWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_TYPE_ARRAY", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x18, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "newParameterizedTypeWithOwner", "LJavaLangReflectType;LJavaLangReflectType;[LJavaLangReflectType;", "arrayOf", "LJavaLangReflectType;", "subtypeOf", "supertypeOf", "canonicalize", "getRawType", "(Ljava/lang/reflect/Type;)Ljava/lang/Class<*>;", "equal", "LNSObject;LNSObject;", "equals", "LJavaLangReflectType;LJavaLangReflectType;", "hashCodeOrZero", "LNSObject;", "typeToString", "getGenericSupertype", "LJavaLangReflectType;LIOSClass;LIOSClass;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;", "getSupertype", "getArrayComponentType", "getCollectionElementType", "LJavaLangReflectType;LIOSClass;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)Ljava/lang/reflect/Type;", "getMapKeyAndValueTypes", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;)[Ljava/lang/reflect/Type;", "resolve", "LJavaLangReflectType;LIOSClass;LJavaLangReflectType;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;", "LJavaLangReflectType;LIOSClass;LJavaLangReflectType;LJavaUtilCollection;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/Type;Ljava/util/Collection<Ljava/lang/reflect/TypeVariable;>;)Ljava/lang/reflect/Type;", "resolveTypeVariable", "LJavaLangReflectType;LIOSClass;LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/reflect/Type;", "indexOf", "[LNSObject;LNSObject;", "declaringClassOf", "LJavaLangReflectTypeVariable;", "(Ljava/lang/reflect/TypeVariable<*>;)Ljava/lang/Class<*>;", "checkNotPrimitive", &Gson_Gson_Types_EMPTY_TYPE_ARRAY, "LGson_Gson_Types_ParameterizedTypeImpl;LGson_Gson_Types_GenericArrayTypeImpl;LGson_Gson_Types_WildcardTypeImpl;" };
  static const J2ObjcClassInfo _Gson_Gson_Types = { "$Gson$Types", "j2objc.gson.internal", ptrTable, methods, fields, 7, 0x11, 22, 1, -1, 41, -1, -1, -1 };
  return &_Gson_Gson_Types;
}

+ (void)initialize {
  if (self == [Gson_Gson_Types class]) {
    Gson_Gson_Types_EMPTY_TYPE_ARRAY = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:JavaLangReflectType_class_()];
    J2OBJC_SET_INITIALIZED(Gson_Gson_Types)
  }
}

@end

void Gson_Gson_Types_init(Gson_Gson_Types *self) {
  NSObject_init(self);
  @throw new_JavaLangUnsupportedOperationException_init();
}

Gson_Gson_Types *new_Gson_Gson_Types_init() {
  J2OBJC_NEW_IMPL(Gson_Gson_Types, init)
}

Gson_Gson_Types *create_Gson_Gson_Types_init() {
  J2OBJC_CREATE_IMPL(Gson_Gson_Types, init)
}

id<JavaLangReflectParameterizedType> Gson_Gson_Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  Gson_Gson_Types_initialize();
  return new_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(ownerType, rawType, typeArguments);
}

id<JavaLangReflectGenericArrayType> Gson_Gson_Types_arrayOfWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  Gson_Gson_Types_initialize();
  return new_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(componentType);
}

id<JavaLangReflectWildcardType> Gson_Gson_Types_subtypeOfWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  Gson_Gson_Types_initialize();
  IOSObjectArray *upperBounds;
  if ([JavaLangReflectWildcardType_class_() isInstance:bound]) {
    upperBounds = [((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(bound, JavaLangReflectWildcardType_class_())))) getUpperBounds];
  }
  else {
    upperBounds = [IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:JavaLangReflectType_class_()];
  }
  return new_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(upperBounds, Gson_Gson_Types_EMPTY_TYPE_ARRAY);
}

id<JavaLangReflectWildcardType> Gson_Gson_Types_supertypeOfWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  Gson_Gson_Types_initialize();
  IOSObjectArray *lowerBounds;
  if ([JavaLangReflectWildcardType_class_() isInstance:bound]) {
    lowerBounds = [((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(bound, JavaLangReflectWildcardType_class_())))) getLowerBounds];
  }
  else {
    lowerBounds = [IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:JavaLangReflectType_class_()];
  }
  return new_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_() } count:1 type:JavaLangReflectType_class_()], lowerBounds);
}

id<JavaLangReflectType> Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Gson_Gson_Types_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    IOSClass *c = (IOSClass *) cast_chk(type, [IOSClass class]);
    return [((IOSClass *) nil_chk(c)) isArray] ? new_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(Gson_Gson_Types_canonicalizeWithJavaLangReflectType_([c getComponentType])) : (id) c;
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> p = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    return new_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_([((id<JavaLangReflectParameterizedType>) nil_chk(p)) getOwnerType], [p getRawType], [p getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectGenericArrayType> g = (id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_());
    return new_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(g)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    id<JavaLangReflectWildcardType> w = (id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_());
    return new_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_([((id<JavaLangReflectWildcardType>) nil_chk(w)) getUpperBounds], [w getLowerBounds]);
  }
  else {
    return type;
  }
}

IOSClass *Gson_Gson_Types_getRawTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Gson_Gson_Types_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    return (IOSClass *) cast_chk(type, [IOSClass class]);
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    Gson_Gson_Preconditions_checkArgumentWithBoolean_([rawType isKindOfClass:[IOSClass class]]);
    return (IOSClass *) cast_chk(rawType, [IOSClass class]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:type]) {
    id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(type, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType];
    return [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(Gson_Gson_Types_getRawTypeWithJavaLangReflectType_(componentType), 0)) java_getClass];
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:type]) {
    return NSObject_class_();
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:type]) {
    return Gson_Gson_Types_getRawTypeWithJavaLangReflectType_(IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(type, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0));
  }
  else {
    NSString *className_ = type == nil ? @"null" : [[type java_getClass] getName];
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Expected a Class, ParameterizedType, or GenericArrayType, but <", type, @"> is of type ", className_));
  }
}

jboolean Gson_Gson_Types_equalWithId_withId_(id a, id b) {
  Gson_Gson_Types_initialize();
  return a == b || (a != nil && [a isEqual:b]);
}

jboolean Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> a, id<JavaLangReflectType> b) {
  Gson_Gson_Types_initialize();
  if (a == b) {
    return true;
  }
  else if ([a isKindOfClass:[IOSClass class]]) {
    return [((id<JavaLangReflectType>) nil_chk(a)) isEqual:b];
  }
  else if ([JavaLangReflectParameterizedType_class_() isInstance:a]) {
    if (!([JavaLangReflectParameterizedType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectParameterizedType> pa = (id<JavaLangReflectParameterizedType>) cast_check(a, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectParameterizedType> pb = (id<JavaLangReflectParameterizedType>) cast_check(b, JavaLangReflectParameterizedType_class_());
    return Gson_Gson_Types_equalWithId_withId_([((id<JavaLangReflectParameterizedType>) nil_chk(pa)) getOwnerType], [((id<JavaLangReflectParameterizedType>) nil_chk(pb)) getOwnerType]) && [((id<JavaLangReflectType>) nil_chk([pa getRawType])) isEqual:[pb getRawType]] && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([pa getActualTypeArguments], [pb getActualTypeArguments]);
  }
  else if ([JavaLangReflectGenericArrayType_class_() isInstance:a]) {
    if (!([JavaLangReflectGenericArrayType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectGenericArrayType> ga = (id<JavaLangReflectGenericArrayType>) cast_check(a, JavaLangReflectGenericArrayType_class_());
    id<JavaLangReflectGenericArrayType> gb = (id<JavaLangReflectGenericArrayType>) cast_check(b, JavaLangReflectGenericArrayType_class_());
    return Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_([((id<JavaLangReflectGenericArrayType>) nil_chk(ga)) getGenericComponentType], [((id<JavaLangReflectGenericArrayType>) nil_chk(gb)) getGenericComponentType]);
  }
  else if ([JavaLangReflectWildcardType_class_() isInstance:a]) {
    if (!([JavaLangReflectWildcardType_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectWildcardType> wa = (id<JavaLangReflectWildcardType>) cast_check(a, JavaLangReflectWildcardType_class_());
    id<JavaLangReflectWildcardType> wb = (id<JavaLangReflectWildcardType>) cast_check(b, JavaLangReflectWildcardType_class_());
    return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((id<JavaLangReflectWildcardType>) nil_chk(wa)) getUpperBounds], [((id<JavaLangReflectWildcardType>) nil_chk(wb)) getUpperBounds]) && JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([wa getLowerBounds], [wb getLowerBounds]);
  }
  else if ([JavaLangReflectTypeVariable_class_() isInstance:a]) {
    if (!([JavaLangReflectTypeVariable_class_() isInstance:b])) {
      return false;
    }
    id<JavaLangReflectTypeVariable> va = (id<JavaLangReflectTypeVariable>) cast_check(a, JavaLangReflectTypeVariable_class_());
    id<JavaLangReflectTypeVariable> vb = (id<JavaLangReflectTypeVariable>) cast_check(b, JavaLangReflectTypeVariable_class_());
    return [((id<JavaLangReflectTypeVariable>) nil_chk(va)) getGenericDeclaration] == [((id<JavaLangReflectTypeVariable>) nil_chk(vb)) getGenericDeclaration] && [((NSString *) nil_chk([va getName])) isEqual:[vb getName]];
  }
  else {
    return false;
  }
}

jint Gson_Gson_Types_hashCodeOrZeroWithId_(id o) {
  Gson_Gson_Types_initialize();
  return o != nil ? ((jint) [o hash]) : 0;
}

NSString *Gson_Gson_Types_typeToStringWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Gson_Gson_Types_initialize();
  return [type isKindOfClass:[IOSClass class]] ? [((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) getName] : [((id<JavaLangReflectType>) nil_chk(type)) description];
}

id<JavaLangReflectType> Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *rawType, IOSClass *toResolve) {
  Gson_Gson_Types_initialize();
  if (toResolve == rawType) {
    return context;
  }
  if ([((IOSClass *) nil_chk(toResolve)) isInterface]) {
    IOSObjectArray *interfaces = [((IOSClass *) nil_chk(rawType)) getInterfaces];
    for (jint i = 0, length = ((IOSObjectArray *) nil_chk(interfaces))->size_; i < length; i++) {
      if (IOSObjectArray_Get(interfaces, i) == toResolve) {
        return IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i);
      }
      else if ([toResolve isAssignableFrom:IOSObjectArray_Get(interfaces, i)]) {
        return Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(IOSObjectArray_Get(nil_chk([rawType getGenericInterfaces]), i), IOSObjectArray_Get(interfaces, i), toResolve);
      }
    }
  }
  if (![((IOSClass *) nil_chk(rawType)) isInterface]) {
    while (rawType != NSObject_class_()) {
      IOSClass *rawSupertype = [((IOSClass *) nil_chk(rawType)) getSuperclass];
      if (rawSupertype == toResolve) {
        return [rawType getGenericSuperclass];
      }
      else if ([toResolve isAssignableFrom:rawSupertype]) {
        return Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_([rawType getGenericSuperclass], rawSupertype, toResolve);
      }
      rawType = rawSupertype;
    }
  }
  return toResolve;
}

id<JavaLangReflectType> Gson_Gson_Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType, IOSClass *supertype) {
  Gson_Gson_Types_initialize();
  if ([JavaLangReflectWildcardType_class_() isInstance:context]) {
    context = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(context, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0);
  }
  Gson_Gson_Preconditions_checkArgumentWithBoolean_([((IOSClass *) nil_chk(supertype)) isAssignableFrom:contextRawType]);
  return Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(context, contextRawType, Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, supertype));
}

id<JavaLangReflectType> Gson_Gson_Types_getArrayComponentTypeWithJavaLangReflectType_(id<JavaLangReflectType> array) {
  Gson_Gson_Types_initialize();
  return [JavaLangReflectGenericArrayType_class_() isInstance:array] ? [((id<JavaLangReflectGenericArrayType>) nil_chk(((id<JavaLangReflectGenericArrayType>) cast_check(array, JavaLangReflectGenericArrayType_class_())))) getGenericComponentType] : (id) [((IOSClass *) nil_chk(((IOSClass *) cast_chk(array, [IOSClass class])))) getComponentType];
}

id<JavaLangReflectType> Gson_Gson_Types_getCollectionElementTypeWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType) {
  Gson_Gson_Types_initialize();
  id<JavaLangReflectType> collectionType = Gson_Gson_Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, JavaUtilCollection_class_());
  if ([JavaLangReflectWildcardType_class_() isInstance:collectionType]) {
    collectionType = IOSObjectArray_Get(nil_chk([((id<JavaLangReflectWildcardType>) nil_chk(((id<JavaLangReflectWildcardType>) cast_check(collectionType, JavaLangReflectWildcardType_class_())))) getUpperBounds]), 0);
  }
  if ([JavaLangReflectParameterizedType_class_() isInstance:collectionType]) {
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(collectionType, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), 0);
  }
  return NSObject_class_();
}

IOSObjectArray *Gson_Gson_Types_getMapKeyAndValueTypesWithJavaLangReflectType_withIOSClass_(id<JavaLangReflectType> context, IOSClass *contextRawType) {
  Gson_Gson_Types_initialize();
  if (context == (id) JavaUtilProperties_class_()) {
    return [IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_(), NSString_class_() } count:2 type:JavaLangReflectType_class_()];
  }
  id<JavaLangReflectType> mapType = Gson_Gson_Types_getSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, JavaUtilMap_class_());
  if ([JavaLangReflectParameterizedType_class_() isInstance:mapType]) {
    id<JavaLangReflectParameterizedType> mapParameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(mapType, JavaLangReflectParameterizedType_class_());
    return [((id<JavaLangReflectParameterizedType>) nil_chk(mapParameterizedType)) getActualTypeArguments];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ NSObject_class_(), NSObject_class_() } count:2 type:JavaLangReflectType_class_()];
}

id<JavaLangReflectType> Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve) {
  Gson_Gson_Types_initialize();
  return Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, toResolve, new_JavaUtilHashSet_init());
}

id<JavaLangReflectType> Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectType> toResolve, id<JavaUtilCollection> visitedTypeVariables) {
  Gson_Gson_Types_initialize();
  while (true) {
    if ([JavaLangReflectTypeVariable_class_() isInstance:toResolve]) {
      id<JavaLangReflectTypeVariable> typeVariable = (id<JavaLangReflectTypeVariable>) cast_check(toResolve, JavaLangReflectTypeVariable_class_());
      if ([((id<JavaUtilCollection>) nil_chk(visitedTypeVariables)) containsWithId:typeVariable]) {
        return toResolve;
      }
      else {
        [visitedTypeVariables addWithId:typeVariable];
      }
      toResolve = Gson_Gson_Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(context, contextRawType, typeVariable);
      if (toResolve == typeVariable) {
        return toResolve;
      }
    }
    else if ([toResolve isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(((IOSClass *) cast_chk(toResolve, [IOSClass class])))) isArray]) {
      IOSClass *original = (IOSClass *) cast_chk(toResolve, [IOSClass class]);
      id<JavaLangReflectType> componentType = [((IOSClass *) nil_chk(original)) getComponentType];
      id<JavaLangReflectType> newComponentType = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, componentType, visitedTypeVariables);
      return componentType == newComponentType ? original : (id) Gson_Gson_Types_arrayOfWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectGenericArrayType_class_() isInstance:toResolve]) {
      id<JavaLangReflectGenericArrayType> original = (id<JavaLangReflectGenericArrayType>) cast_check(toResolve, JavaLangReflectGenericArrayType_class_());
      id<JavaLangReflectType> componentType = [((id<JavaLangReflectGenericArrayType>) nil_chk(original)) getGenericComponentType];
      id<JavaLangReflectType> newComponentType = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, componentType, visitedTypeVariables);
      return componentType == newComponentType ? original : Gson_Gson_Types_arrayOfWithJavaLangReflectType_(newComponentType);
    }
    else if ([JavaLangReflectParameterizedType_class_() isInstance:toResolve]) {
      id<JavaLangReflectParameterizedType> original = (id<JavaLangReflectParameterizedType>) cast_check(toResolve, JavaLangReflectParameterizedType_class_());
      id<JavaLangReflectType> ownerType = [((id<JavaLangReflectParameterizedType>) nil_chk(original)) getOwnerType];
      id<JavaLangReflectType> newOwnerType = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, ownerType, visitedTypeVariables);
      jboolean changed = newOwnerType != ownerType;
      IOSObjectArray *args = [original getActualTypeArguments];
      for (jint t = 0, length = ((IOSObjectArray *) nil_chk(args))->size_; t < length; t++) {
        id<JavaLangReflectType> resolvedTypeArgument = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, IOSObjectArray_Get(args, t), visitedTypeVariables);
        if (resolvedTypeArgument != IOSObjectArray_Get(args, t)) {
          if (!changed) {
            args = [args java_clone];
            changed = true;
          }
          (void) IOSObjectArray_Set(nil_chk(args), t, resolvedTypeArgument);
        }
      }
      return changed ? Gson_Gson_Types_newParameterizedTypeWithOwnerWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(newOwnerType, [original getRawType], args) : original;
    }
    else if ([JavaLangReflectWildcardType_class_() isInstance:toResolve]) {
      id<JavaLangReflectWildcardType> original = (id<JavaLangReflectWildcardType>) cast_check(toResolve, JavaLangReflectWildcardType_class_());
      IOSObjectArray *originalLowerBound = [((id<JavaLangReflectWildcardType>) nil_chk(original)) getLowerBounds];
      IOSObjectArray *originalUpperBound = [original getUpperBounds];
      if (((IOSObjectArray *) nil_chk(originalLowerBound))->size_ == 1) {
        id<JavaLangReflectType> lowerBound = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, IOSObjectArray_Get(originalLowerBound, 0), visitedTypeVariables);
        if (lowerBound != IOSObjectArray_Get(originalLowerBound, 0)) {
          return Gson_Gson_Types_supertypeOfWithJavaLangReflectType_(lowerBound);
        }
      }
      else if (((IOSObjectArray *) nil_chk(originalUpperBound))->size_ == 1) {
        id<JavaLangReflectType> upperBound = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_withJavaUtilCollection_(context, contextRawType, IOSObjectArray_Get(originalUpperBound, 0), visitedTypeVariables);
        if (upperBound != IOSObjectArray_Get(originalUpperBound, 0)) {
          return Gson_Gson_Types_subtypeOfWithJavaLangReflectType_(upperBound);
        }
      }
      return original;
    }
    else {
      return toResolve;
    }
  }
}

id<JavaLangReflectType> Gson_Gson_Types_resolveTypeVariableWithJavaLangReflectType_withIOSClass_withJavaLangReflectTypeVariable_(id<JavaLangReflectType> context, IOSClass *contextRawType, id<JavaLangReflectTypeVariable> unknown) {
  Gson_Gson_Types_initialize();
  IOSClass *declaredByRaw = Gson_Gson_Types_declaringClassOfWithJavaLangReflectTypeVariable_(unknown);
  if (declaredByRaw == nil) {
    return unknown;
  }
  id<JavaLangReflectType> declaredBy = Gson_Gson_Types_getGenericSupertypeWithJavaLangReflectType_withIOSClass_withIOSClass_(context, contextRawType, declaredByRaw);
  if ([JavaLangReflectParameterizedType_class_() isInstance:declaredBy]) {
    jint index = Gson_Gson_Types_indexOfWithNSObjectArray_withId_([declaredByRaw getTypeParameters], unknown);
    return IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(declaredBy, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), index);
  }
  return unknown;
}

jint Gson_Gson_Types_indexOfWithNSObjectArray_withId_(IOSObjectArray *array, id toFind) {
  Gson_Gson_Types_initialize();
  for (jint i = 0, length = ((IOSObjectArray *) nil_chk(array))->size_; i < length; i++) {
    if ([nil_chk(toFind) isEqual:IOSObjectArray_Get(array, i)]) {
      return i;
    }
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

IOSClass *Gson_Gson_Types_declaringClassOfWithJavaLangReflectTypeVariable_(id<JavaLangReflectTypeVariable> typeVariable) {
  Gson_Gson_Types_initialize();
  id<JavaLangReflectGenericDeclaration> genericDeclaration = [((id<JavaLangReflectTypeVariable>) nil_chk(typeVariable)) getGenericDeclaration];
  return [genericDeclaration isKindOfClass:[IOSClass class]] ? (IOSClass *) cast_chk(genericDeclaration, [IOSClass class]) : nil;
}

void Gson_Gson_Types_checkNotPrimitiveWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  Gson_Gson_Types_initialize();
  Gson_Gson_Preconditions_checkArgumentWithBoolean_(!([type isKindOfClass:[IOSClass class]]) || ![((IOSClass *) nil_chk(((IOSClass *) cast_chk(type, [IOSClass class])))) isPrimitive]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Gson_Gson_Types)

J2OBJC_NAME_MAPPING(Gson_Gson_Types, "j2objc.gson.internal", "Gson")

@implementation Gson_Gson_Types_ParameterizedTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)ownerType
                    withJavaLangReflectType:(id<JavaLangReflectType>)rawType
               withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments {
  Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(self, ownerType, rawType, typeArguments);
  return self;
}

- (IOSObjectArray *)getActualTypeArguments {
  return [((IOSObjectArray *) nil_chk(typeArguments_)) java_clone];
}

- (id<JavaLangReflectType>)getRawType {
  return rawType_;
}

- (id<JavaLangReflectType>)getOwnerType {
  return ownerType_;
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectParameterizedType_class_() isInstance:other] && Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectParameterizedType>) cast_check(other, JavaLangReflectParameterizedType_class_()));
}

- (NSUInteger)hash {
  return JavaUtilArrays_hashCodeWithNSObjectArray_(typeArguments_) ^ ((jint) [((id<JavaLangReflectType>) nil_chk(rawType_)) hash]) ^ Gson_Gson_Types_hashCodeOrZeroWithId_(ownerType_);
}

- (NSString *)description {
  jint length = ((IOSObjectArray *) nil_chk(typeArguments_))->size_;
  if (length == 0) {
    return Gson_Gson_Types_typeToStringWithJavaLangReflectType_(rawType_);
  }
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_initWithInt_(30 * (length + 1));
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:Gson_Gson_Types_typeToStringWithJavaLangReflectType_(rawType_)])) appendWithNSString:@"<"])) appendWithNSString:Gson_Gson_Types_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, 0))];
  for (jint i = 1; i < length; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@", "])) appendWithNSString:Gson_Gson_Types_typeToStringWithJavaLangReflectType_(IOSObjectArray_Get(typeArguments_, i))];
  }
  return [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:@">"])) description];
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getActualTypeArguments);
  methods[2].selector = @selector(getRawType);
  methods[3].selector = @selector(getOwnerType);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ownerType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rawType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeArguments_", "[LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = Gson_Gson_Types_ParameterizedTypeImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LGson_Gson_Types;" };
  static const J2ObjcClassInfo _Gson_Gson_Types_ParameterizedTypeImpl = { "ParameterizedTypeImpl", "j2objc.gson.internal", ptrTable, methods, fields, 7, 0x1a, 7, 4, 5, -1, -1, -1, -1 };
  return &_Gson_Gson_Types_ParameterizedTypeImpl;
}

@end

void Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(Gson_Gson_Types_ParameterizedTypeImpl *self, id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  NSObject_init(self);
  if ([rawType isKindOfClass:[IOSClass class]]) {
    IOSClass *rawTypeAsClass = (IOSClass *) cast_chk(rawType, [IOSClass class]);
    jboolean isStaticOrTopLevelClass = JavaLangReflectModifier_isStaticWithInt_([((IOSClass *) nil_chk(rawTypeAsClass)) getModifiers]) || [rawTypeAsClass getEnclosingClass] == nil;
    Gson_Gson_Preconditions_checkArgumentWithBoolean_(ownerType != nil || isStaticOrTopLevelClass);
  }
  self->ownerType_ = ownerType == nil ? nil : Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(ownerType);
  self->rawType_ = Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(rawType);
  self->typeArguments_ = [((IOSObjectArray *) nil_chk(typeArguments)) java_clone];
  for (jint t = 0, length = ((IOSObjectArray *) nil_chk(self->typeArguments_))->size_; t < length; t++) {
    (void) Gson_Gson_Preconditions_checkNotNullWithId_(IOSObjectArray_Get(self->typeArguments_, t));
    Gson_Gson_Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(self->typeArguments_, t));
    (void) IOSObjectArray_Set(self->typeArguments_, t, Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(self->typeArguments_, t)));
  }
}

Gson_Gson_Types_ParameterizedTypeImpl *new_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_NEW_IMPL(Gson_Gson_Types_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

Gson_Gson_Types_ParameterizedTypeImpl *create_Gson_Gson_Types_ParameterizedTypeImpl_initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> ownerType, id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments) {
  J2OBJC_CREATE_IMPL(Gson_Gson_Types_ParameterizedTypeImpl, initWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectTypeArray_, ownerType, rawType, typeArguments)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Gson_Gson_Types_ParameterizedTypeImpl)

@implementation Gson_Gson_Types_GenericArrayTypeImpl

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)componentType {
  Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(self, componentType);
  return self;
}

- (id<JavaLangReflectType>)getGenericComponentType {
  return componentType_;
}

- (jboolean)isEqual:(id)o {
  return [JavaLangReflectGenericArrayType_class_() isInstance:o] && Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectGenericArrayType>) cast_check(o, JavaLangReflectGenericArrayType_class_()));
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaLangReflectType>) nil_chk(componentType_)) hash]);
}

- (NSString *)description {
  return JreStrcat("$$", Gson_Gson_Types_typeToStringWithJavaLangReflectType_(componentType_), @"[]");
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectType:);
  methods[1].selector = @selector(getGenericComponentType);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "componentType_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = Gson_Gson_Types_GenericArrayTypeImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LGson_Gson_Types;" };
  static const J2ObjcClassInfo _Gson_Gson_Types_GenericArrayTypeImpl = { "GenericArrayTypeImpl", "j2objc.gson.internal", ptrTable, methods, fields, 7, 0x1a, 5, 2, 5, -1, -1, -1, -1 };
  return &_Gson_Gson_Types_GenericArrayTypeImpl;
}

@end

void Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(Gson_Gson_Types_GenericArrayTypeImpl *self, id<JavaLangReflectType> componentType) {
  NSObject_init(self);
  self->componentType_ = Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(componentType);
}

Gson_Gson_Types_GenericArrayTypeImpl *new_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_NEW_IMPL(Gson_Gson_Types_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

Gson_Gson_Types_GenericArrayTypeImpl *create_Gson_Gson_Types_GenericArrayTypeImpl_initWithJavaLangReflectType_(id<JavaLangReflectType> componentType) {
  J2OBJC_CREATE_IMPL(Gson_Gson_Types_GenericArrayTypeImpl, initWithJavaLangReflectType_, componentType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Gson_Gson_Types_GenericArrayTypeImpl)

@implementation Gson_Gson_Types_WildcardTypeImpl

- (instancetype)initWithJavaLangReflectTypeArray:(IOSObjectArray *)upperBounds
                    withJavaLangReflectTypeArray:(IOSObjectArray *)lowerBounds {
  Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(self, upperBounds, lowerBounds);
  return self;
}

- (IOSObjectArray *)getUpperBounds {
  return [IOSObjectArray newArrayWithObjects:(id[]){ upperBound_ } count:1 type:JavaLangReflectType_class_()];
}

- (IOSObjectArray *)getLowerBounds {
  return lowerBound_ != nil ? [IOSObjectArray newArrayWithObjects:(id[]){ lowerBound_ } count:1 type:JavaLangReflectType_class_()] : JreLoadStatic(Gson_Gson_Types, EMPTY_TYPE_ARRAY);
}

- (jboolean)isEqual:(id)other {
  return [JavaLangReflectWildcardType_class_() isInstance:other] && Gson_Gson_Types_equalsWithJavaLangReflectType_withJavaLangReflectType_(self, (id<JavaLangReflectWildcardType>) cast_check(other, JavaLangReflectWildcardType_class_()));
}

- (NSUInteger)hash {
  return (lowerBound_ != nil ? 31 + ((jint) [lowerBound_ hash]) : 1) ^ (31 + ((jint) [((id<JavaLangReflectType>) nil_chk(upperBound_)) hash]));
}

- (NSString *)description {
  if (lowerBound_ != nil) {
    return JreStrcat("$$", @"? super ", Gson_Gson_Types_typeToStringWithJavaLangReflectType_(lowerBound_));
  }
  else if (upperBound_ == (id) NSObject_class_()) {
    return @"?";
  }
  else {
    return JreStrcat("$$", @"? extends ", Gson_Gson_Types_typeToStringWithJavaLangReflectType_(upperBound_));
  }
}

- (NSString *)getTypeName {
  return JavaLangReflectType_getTypeName(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectTypeArray:withJavaLangReflectTypeArray:);
  methods[1].selector = @selector(getUpperBounds);
  methods[2].selector = @selector(getLowerBounds);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "upperBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerBound_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = Gson_Gson_Types_WildcardTypeImpl_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaLangReflectType;[LJavaLangReflectType;", "equals", "LNSObject;", "hashCode", "toString", "LGson_Gson_Types;" };
  static const J2ObjcClassInfo _Gson_Gson_Types_WildcardTypeImpl = { "WildcardTypeImpl", "j2objc.gson.internal", ptrTable, methods, fields, 7, 0x1a, 6, 3, 5, -1, -1, -1, -1 };
  return &_Gson_Gson_Types_WildcardTypeImpl;
}

@end

void Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(Gson_Gson_Types_WildcardTypeImpl *self, IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  NSObject_init(self);
  Gson_Gson_Preconditions_checkArgumentWithBoolean_(((IOSObjectArray *) nil_chk(lowerBounds))->size_ <= 1);
  Gson_Gson_Preconditions_checkArgumentWithBoolean_(((IOSObjectArray *) nil_chk(upperBounds))->size_ == 1);
  if (lowerBounds->size_ == 1) {
    (void) Gson_Gson_Preconditions_checkNotNullWithId_(IOSObjectArray_Get(lowerBounds, 0));
    Gson_Gson_Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    Gson_Gson_Preconditions_checkArgumentWithBoolean_(IOSObjectArray_Get(upperBounds, 0) == (id) NSObject_class_());
    self->lowerBound_ = Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(lowerBounds, 0));
    self->upperBound_ = NSObject_class_();
  }
  else {
    (void) Gson_Gson_Preconditions_checkNotNullWithId_(IOSObjectArray_Get(upperBounds, 0));
    Gson_Gson_Types_checkNotPrimitiveWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
    self->lowerBound_ = nil;
    self->upperBound_ = Gson_Gson_Types_canonicalizeWithJavaLangReflectType_(IOSObjectArray_Get(upperBounds, 0));
  }
}

Gson_Gson_Types_WildcardTypeImpl *new_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_NEW_IMPL(Gson_Gson_Types_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

Gson_Gson_Types_WildcardTypeImpl *create_Gson_Gson_Types_WildcardTypeImpl_initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_(IOSObjectArray *upperBounds, IOSObjectArray *lowerBounds) {
  J2OBJC_CREATE_IMPL(Gson_Gson_Types_WildcardTypeImpl, initWithJavaLangReflectTypeArray_withJavaLangReflectTypeArray_, upperBounds, lowerBounds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Gson_Gson_Types_WildcardTypeImpl)
