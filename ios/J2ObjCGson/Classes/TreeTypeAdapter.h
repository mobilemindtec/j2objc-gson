//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TreeTypeAdapter.java
//

#ifndef TreeTypeAdapter_H
#define TreeTypeAdapter_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TypeAdapter.h"

@class GsonGson;
@class GsonJsonReader;
@class GsonJsonWriter;
@class GsonTypeToken;
@class IOSClass;
@protocol GsonJsonDeserializer;
@protocol GsonJsonSerializer;
@protocol GsonTypeAdapterFactory;

@interface GsonTreeTypeAdapter : GsonTypeAdapter {
 @public
  GsonGson *gson_;
}

#pragma mark Public

- (instancetype __nonnull)initWithGsonJsonSerializer:(id<GsonJsonSerializer>)serializer
                            withGsonJsonDeserializer:(id<GsonJsonDeserializer>)deserializer
                                        withGsonGson:(GsonGson *)gson
                                   withGsonTypeToken:(GsonTypeToken *)typeToken
                          withGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast;

+ (id<GsonTypeAdapterFactory>)newFactoryWithGsonTypeToken:(GsonTypeToken *)exactType
                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newFactoryWithMatchRawTypeWithGsonTypeToken:(GsonTypeToken *)exactType
                                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newTypeHierarchyFactoryWithIOSClass:(IOSClass *)hierarchyType
                                                           withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonTreeTypeAdapter)

J2OBJC_FIELD_SETTER(GsonTreeTypeAdapter, gson_, GsonGson *)

FOUNDATION_EXPORT void GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(GsonTreeTypeAdapter *self, id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT GsonTreeTypeAdapter *new_GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonTreeTypeAdapter *create_GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newFactoryWithGsonTypeToken_withId_(GsonTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newFactoryWithMatchRawTypeWithGsonTypeToken_withId_(GsonTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(IOSClass *hierarchyType, id typeAdapter);

J2OBJC_TYPE_LITERAL_HEADER(GsonTreeTypeAdapter)

@compatibility_alias ComGoogleGsonInternalBindTreeTypeAdapter GsonTreeTypeAdapter;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TreeTypeAdapter_H
