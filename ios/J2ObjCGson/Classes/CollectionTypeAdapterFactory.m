//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/CollectionTypeAdapterFactory.java
//

#include "$Gson$Types.h"
#include "CollectionTypeAdapterFactory.h"
#include "ConstructorConstructor.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "ObjectConstructor.h"
#include "TypeAdapter.h"
#include "TypeAdapterRuntimeTypeWrapper.h"
#include "TypeToken.h"
#include "java/lang/reflect/Type.h"
#include "java/util/Collection.h"

@class GsonJsonElement;
@class JavaIoReader;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GsonCollectionTypeAdapterFactory () {
 @public
  GsonConstructorConstructor *constructorConstructor_;
}

@end

J2OBJC_FIELD_SETTER(GsonCollectionTypeAdapterFactory, constructorConstructor_, GsonConstructorConstructor *)

@interface GsonCollectionTypeAdapterFactory_Adapter : GsonTypeAdapter {
 @public
  GsonTypeAdapter *elementTypeAdapter_;
  id<GsonObjectConstructor> constructor_;
}

- (instancetype)initWithGsonGson:(GsonGson *)context
         withJavaLangReflectType:(id<JavaLangReflectType>)elementType
             withGsonTypeAdapter:(GsonTypeAdapter *)elementTypeAdapter
       withGsonObjectConstructor:(id<GsonObjectConstructor>)constructor;

- (id<JavaUtilCollection>)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id<JavaUtilCollection>)collection;

- (id<JavaUtilCollection>)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (id<JavaUtilCollection>)fromJsonWithNSString:(NSString *)arg0;

- (id<JavaUtilCollection>)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonCollectionTypeAdapterFactory_Adapter)

J2OBJC_FIELD_SETTER(GsonCollectionTypeAdapterFactory_Adapter, elementTypeAdapter_, GsonTypeAdapter *)
J2OBJC_FIELD_SETTER(GsonCollectionTypeAdapterFactory_Adapter, constructor_, id<GsonObjectConstructor>)

__attribute__((unused)) static void GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonCollectionTypeAdapterFactory_Adapter *self, GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor);

__attribute__((unused)) static GsonCollectionTypeAdapterFactory_Adapter *new_GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonCollectionTypeAdapterFactory_Adapter *create_GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor);

J2OBJC_TYPE_LITERAL_HEADER(GsonCollectionTypeAdapterFactory_Adapter)

@implementation GsonCollectionTypeAdapterFactory

- (instancetype)initWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor {
  GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(self, constructorConstructor);
  return self;
}

- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)typeToken {
  id<JavaLangReflectType> type = [((GsonTypeToken *) nil_chk(typeToken)) getType];
  IOSClass *rawType = [typeToken getRawType];
  if (![JavaUtilCollection_class_() isAssignableFrom:rawType]) {
    return nil;
  }
  id<JavaLangReflectType> elementType = Gson_Gson_Types_getCollectionElementTypeWithJavaLangReflectType_withIOSClass_(type, rawType);
  GsonTypeAdapter *elementTypeAdapter = [((GsonGson *) nil_chk(gson)) getAdapterWithGsonTypeToken:GsonTypeToken_getWithJavaLangReflectType_(elementType)];
  id<GsonObjectConstructor> constructor = [((GsonConstructorConstructor *) nil_chk(constructorConstructor_)) getWithGsonTypeToken:typeToken];
  GsonTypeAdapter *result = new_GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(gson, elementType, elementTypeAdapter, constructor);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonConstructorConstructor:);
  methods[1].selector = @selector(createWithGsonGson:withGsonTypeToken:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonConstructorConstructor;", "create", "LGsonGson;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGsonCollectionTypeAdapterFactory_Adapter;" };
  static const J2ObjcClassInfo _GsonCollectionTypeAdapterFactory = { "CollectionTypeAdapterFactory", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, 4, -1, -1, -1 };
  return &_GsonCollectionTypeAdapterFactory;
}

@end

void GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonCollectionTypeAdapterFactory *self, GsonConstructorConstructor *constructorConstructor) {
  NSObject_init(self);
  self->constructorConstructor_ = constructorConstructor;
}

GsonCollectionTypeAdapterFactory *new_GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonConstructorConstructor *constructorConstructor) {
  J2OBJC_NEW_IMPL(GsonCollectionTypeAdapterFactory, initWithGsonConstructorConstructor_, constructorConstructor)
}

GsonCollectionTypeAdapterFactory *create_GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonConstructorConstructor *constructorConstructor) {
  J2OBJC_CREATE_IMPL(GsonCollectionTypeAdapterFactory, initWithGsonConstructorConstructor_, constructorConstructor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonCollectionTypeAdapterFactory)

J2OBJC_NAME_MAPPING(GsonCollectionTypeAdapterFactory, "com.google.gson.internal.bind", "Gson")

@implementation GsonCollectionTypeAdapterFactory_Adapter

- (instancetype)initWithGsonGson:(GsonGson *)context
         withJavaLangReflectType:(id<JavaLangReflectType>)elementType
             withGsonTypeAdapter:(GsonTypeAdapter *)elementTypeAdapter
       withGsonObjectConstructor:(id<GsonObjectConstructor>)constructor {
  GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(self, context, elementType, elementTypeAdapter, constructor);
  return self;
}

- (id<JavaUtilCollection>)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  id<JavaUtilCollection> collection = [((id<GsonObjectConstructor>) nil_chk(constructor_)) construct];
  [inArg beginArray];
  while ([inArg hasNext]) {
    id instance = [((GsonTypeAdapter *) nil_chk(elementTypeAdapter_)) readWithGsonJsonReader:inArg];
    [((id<JavaUtilCollection>) nil_chk(collection)) addWithId:instance];
  }
  [inArg endArray];
  return collection;
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  (void) [((GsonJsonWriter *) nil_chk(outArg)) beginArray];
  for (id __strong element in collection) {
    [((GsonTypeAdapter *) nil_chk(elementTypeAdapter_)) writeWithGsonJsonWriter:outArg withId:element];
  }
  (void) [outArg endArray];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonGson:withJavaLangReflectType:withGsonTypeAdapter:withGsonObjectConstructor:);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "elementTypeAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "constructor_", "LGsonObjectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LGsonGson;LJavaLangReflectType;LGsonTypeAdapter;LGsonObjectConstructor;", "(Lcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter<TE;>;Lcom/google/gson/internal/ObjectConstructor<+Ljava/util/Collection<TE;>;>;)V", "read", "LGsonJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)Ljava/util/Collection<TE;>;", "write", "LGsonJsonWriter;LJavaUtilCollection;", "(Lcom/google/gson/stream/JsonWriter;Ljava/util/Collection<TE;>;)V", "Lcom/google/gson/TypeAdapter<TE;>;", "Lcom/google/gson/internal/ObjectConstructor<+Ljava/util/Collection<TE;>;>;", "LGsonCollectionTypeAdapterFactory;", "<E:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<Ljava/util/Collection<TE;>;>;" };
  static const J2ObjcClassInfo _GsonCollectionTypeAdapterFactory_Adapter = { "Adapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x1a, 3, 2, 11, -1, -1, 12, -1 };
  return &_GsonCollectionTypeAdapterFactory_Adapter;
}

@end

void GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonCollectionTypeAdapterFactory_Adapter *self, GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor) {
  GsonTypeAdapter_init(self);
  self->elementTypeAdapter_ = new_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(context, elementTypeAdapter, elementType);
  self->constructor_ = constructor;
}

GsonCollectionTypeAdapterFactory_Adapter *new_GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor) {
  J2OBJC_NEW_IMPL(GsonCollectionTypeAdapterFactory_Adapter, initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_, context, elementType, elementTypeAdapter, constructor)
}

GsonCollectionTypeAdapterFactory_Adapter *create_GsonCollectionTypeAdapterFactory_Adapter_initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonGson *context, id<JavaLangReflectType> elementType, GsonTypeAdapter *elementTypeAdapter, id<GsonObjectConstructor> constructor) {
  J2OBJC_CREATE_IMPL(GsonCollectionTypeAdapterFactory_Adapter, initWithGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_, context, elementType, elementTypeAdapter, constructor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonCollectionTypeAdapterFactory_Adapter)
