//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/MapTypeAdapterFactory.java
//

#include "$Gson$Types.h"
#include "ConstructorConstructor.h"
#include "Gson.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonPrimitive.h"
#include "JsonReader.h"
#include "JsonReaderInternalAccess.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "MapTypeAdapterFactory.h"
#include "ObjectConstructor.h"
#include "Streams.h"
#include "TypeAdapter.h"
#include "TypeAdapterRuntimeTypeWrapper.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@class JavaIoReader;

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GsonMapTypeAdapterFactory () {
 @public
  GsonConstructorConstructor *constructorConstructor_;
}

- (GsonTypeAdapter *)getKeyAdapterWithGsonGson:(GsonGson *)context
                       withJavaLangReflectType:(id<JavaLangReflectType>)keyType;

@end

J2OBJC_FIELD_SETTER(GsonMapTypeAdapterFactory, constructorConstructor_, GsonConstructorConstructor *)

__attribute__((unused)) static GsonTypeAdapter *GsonMapTypeAdapterFactory_getKeyAdapterWithGsonGson_withJavaLangReflectType_(GsonMapTypeAdapterFactory *self, GsonGson *context, id<JavaLangReflectType> keyType);

@interface GsonMapTypeAdapterFactory_Adapter : GsonTypeAdapter {
 @public
  GsonMapTypeAdapterFactory *this$0_;
  GsonTypeAdapter *keyTypeAdapter_;
  GsonTypeAdapter *valueTypeAdapter_;
  id<GsonObjectConstructor> constructor_;
}

- (instancetype)initWithGsonMapTypeAdapterFactory:(GsonMapTypeAdapterFactory *)outer$
                                     withGsonGson:(GsonGson *)context
                          withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                              withGsonTypeAdapter:(GsonTypeAdapter *)keyTypeAdapter
                          withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                              withGsonTypeAdapter:(GsonTypeAdapter *)valueTypeAdapter
                        withGsonObjectConstructor:(id<GsonObjectConstructor>)constructor;

- (id<JavaUtilMap>)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id<JavaUtilMap>)map;

- (NSString *)keyToStringWithGsonJsonElement:(GsonJsonElement *)keyElement;

- (id<JavaUtilMap>)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (id<JavaUtilMap>)fromJsonWithNSString:(NSString *)arg0;

- (id<JavaUtilMap>)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonMapTypeAdapterFactory_Adapter)

J2OBJC_FIELD_SETTER(GsonMapTypeAdapterFactory_Adapter, keyTypeAdapter_, GsonTypeAdapter *)
J2OBJC_FIELD_SETTER(GsonMapTypeAdapterFactory_Adapter, valueTypeAdapter_, GsonTypeAdapter *)
J2OBJC_FIELD_SETTER(GsonMapTypeAdapterFactory_Adapter, constructor_, id<GsonObjectConstructor>)

__attribute__((unused)) static void GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory_Adapter *self, GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor);

__attribute__((unused)) static GsonMapTypeAdapterFactory_Adapter *new_GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonMapTypeAdapterFactory_Adapter *create_GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor);

__attribute__((unused)) static NSString *GsonMapTypeAdapterFactory_Adapter_keyToStringWithGsonJsonElement_(GsonMapTypeAdapterFactory_Adapter *self, GsonJsonElement *keyElement);

J2OBJC_TYPE_LITERAL_HEADER(GsonMapTypeAdapterFactory_Adapter)

@implementation GsonMapTypeAdapterFactory

- (instancetype)initWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor
                                       withBoolean:(jboolean)complexMapKeySerialization {
  GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(self, constructorConstructor, complexMapKeySerialization);
  return self;
}

- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)typeToken {
  id<JavaLangReflectType> type = [((GsonTypeToken *) nil_chk(typeToken)) getType];
  IOSClass *rawType = [typeToken getRawType];
  if (![JavaUtilMap_class_() isAssignableFrom:rawType]) {
    return nil;
  }
  IOSClass *rawTypeOfSrc = Gson_Gson_Types_getRawTypeWithJavaLangReflectType_(type);
  IOSObjectArray *keyAndValueTypes = Gson_Gson_Types_getMapKeyAndValueTypesWithJavaLangReflectType_withIOSClass_(type, rawTypeOfSrc);
  GsonTypeAdapter *keyAdapter = GsonMapTypeAdapterFactory_getKeyAdapterWithGsonGson_withJavaLangReflectType_(self, gson, IOSObjectArray_Get(nil_chk(keyAndValueTypes), 0));
  GsonTypeAdapter *valueAdapter = [((GsonGson *) nil_chk(gson)) getAdapterWithGsonTypeToken:GsonTypeToken_getWithJavaLangReflectType_(IOSObjectArray_Get(keyAndValueTypes, 1))];
  id<GsonObjectConstructor> constructor = [((GsonConstructorConstructor *) nil_chk(constructorConstructor_)) getWithGsonTypeToken:typeToken];
  GsonTypeAdapter *result = new_GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(self, gson, IOSObjectArray_Get(keyAndValueTypes, 0), keyAdapter, IOSObjectArray_Get(keyAndValueTypes, 1), valueAdapter, constructor);
  return result;
}

- (GsonTypeAdapter *)getKeyAdapterWithGsonGson:(GsonGson *)context
                       withJavaLangReflectType:(id<JavaLangReflectType>)keyType {
  return GsonMapTypeAdapterFactory_getKeyAdapterWithGsonGson_withJavaLangReflectType_(self, context, keyType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonConstructorConstructor:withBoolean:);
  methods[1].selector = @selector(createWithGsonGson:withGsonTypeToken:);
  methods[2].selector = @selector(getKeyAdapterWithGsonGson:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "complexMapKeySerialization_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonConstructorConstructor;Z", "create", "LGsonGson;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "getKeyAdapter", "LGsonGson;LJavaLangReflectType;", "(Lcom/google/gson/Gson;Ljava/lang/reflect/Type;)Lcom/google/gson/TypeAdapter<*>;", "LGsonMapTypeAdapterFactory_Adapter;" };
  static const J2ObjcClassInfo _GsonMapTypeAdapterFactory = { "MapTypeAdapterFactory", "j2objc.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 3, 2, -1, 7, -1, -1, -1 };
  return &_GsonMapTypeAdapterFactory;
}

@end

void GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(GsonMapTypeAdapterFactory *self, GsonConstructorConstructor *constructorConstructor, jboolean complexMapKeySerialization) {
  NSObject_init(self);
  self->constructorConstructor_ = constructorConstructor;
  self->complexMapKeySerialization_ = complexMapKeySerialization;
}

GsonMapTypeAdapterFactory *new_GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(GsonConstructorConstructor *constructorConstructor, jboolean complexMapKeySerialization) {
  J2OBJC_NEW_IMPL(GsonMapTypeAdapterFactory, initWithGsonConstructorConstructor_withBoolean_, constructorConstructor, complexMapKeySerialization)
}

GsonMapTypeAdapterFactory *create_GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(GsonConstructorConstructor *constructorConstructor, jboolean complexMapKeySerialization) {
  J2OBJC_CREATE_IMPL(GsonMapTypeAdapterFactory, initWithGsonConstructorConstructor_withBoolean_, constructorConstructor, complexMapKeySerialization)
}

GsonTypeAdapter *GsonMapTypeAdapterFactory_getKeyAdapterWithGsonGson_withJavaLangReflectType_(GsonMapTypeAdapterFactory *self, GsonGson *context, id<JavaLangReflectType> keyType) {
  return (keyType == (id) [IOSClass booleanClass] || keyType == (id) JavaLangBoolean_class_()) ? JreLoadStatic(GsonTypeAdapters, BOOLEAN_AS_STRING) : [((GsonGson *) nil_chk(context)) getAdapterWithGsonTypeToken:GsonTypeToken_getWithJavaLangReflectType_(keyType)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonMapTypeAdapterFactory)

J2OBJC_NAME_MAPPING(GsonMapTypeAdapterFactory, "j2objc.gson.internal.bind", "Gson")

@implementation GsonMapTypeAdapterFactory_Adapter

- (instancetype)initWithGsonMapTypeAdapterFactory:(GsonMapTypeAdapterFactory *)outer$
                                     withGsonGson:(GsonGson *)context
                          withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                              withGsonTypeAdapter:(GsonTypeAdapter *)keyTypeAdapter
                          withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                              withGsonTypeAdapter:(GsonTypeAdapter *)valueTypeAdapter
                        withGsonObjectConstructor:(id<GsonObjectConstructor>)constructor {
  GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(self, outer$, context, keyType, keyTypeAdapter, valueType, valueTypeAdapter, constructor);
  return self;
}

- (id<JavaUtilMap>)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  GsonJsonToken *peek = [((GsonJsonReader *) nil_chk(inArg)) peek];
  if (peek == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  id<JavaUtilMap> map = [((id<GsonObjectConstructor>) nil_chk(constructor_)) construct];
  if (peek == JreLoadEnum(GsonJsonToken, BEGIN_ARRAY)) {
    [inArg beginArray];
    while ([inArg hasNext]) {
      [inArg beginArray];
      id key = [((GsonTypeAdapter *) nil_chk(keyTypeAdapter_)) readWithGsonJsonReader:inArg];
      id value = [((GsonTypeAdapter *) nil_chk(valueTypeAdapter_)) readWithGsonJsonReader:inArg];
      id replaced = [((id<JavaUtilMap>) nil_chk(map)) putWithId:key withId:value];
      if (replaced != nil) {
        @throw new_GsonJsonSyntaxException_initWithNSString_(JreStrcat("$@", @"duplicate key: ", key));
      }
      [inArg endArray];
    }
    [inArg endArray];
  }
  else {
    [inArg beginObject];
    while ([inArg hasNext]) {
      [((GsonJsonReaderInternalAccess *) nil_chk(JreLoadStatic(GsonJsonReaderInternalAccess, INSTANCE))) promoteNameToValueWithGsonJsonReader:inArg];
      id key = [((GsonTypeAdapter *) nil_chk(keyTypeAdapter_)) readWithGsonJsonReader:inArg];
      id value = [((GsonTypeAdapter *) nil_chk(valueTypeAdapter_)) readWithGsonJsonReader:inArg];
      id replaced = [((id<JavaUtilMap>) nil_chk(map)) putWithId:key withId:value];
      if (replaced != nil) {
        @throw new_GsonJsonSyntaxException_initWithNSString_(JreStrcat("$@", @"duplicate key: ", key));
      }
    }
    [inArg endObject];
  }
  return map;
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id<JavaUtilMap>)map {
  if (map == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  if (!this$0_->complexMapKeySerialization_) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) beginObject];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
      (void) [outArg nameWithNSString:NSString_java_valueOf_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])];
      [((GsonTypeAdapter *) nil_chk(valueTypeAdapter_)) writeWithGsonJsonWriter:outArg withId:[entry_ getValue]];
    }
    (void) [outArg endObject];
    return;
  }
  jboolean hasComplexKeys = false;
  id<JavaUtilList> keys = new_JavaUtilArrayList_initWithInt_([map size]);
  id<JavaUtilList> values = new_JavaUtilArrayList_initWithInt_([map size]);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
    GsonJsonElement *keyElement = [((GsonTypeAdapter *) nil_chk(keyTypeAdapter_)) toJsonTreeWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    [keys addWithId:keyElement];
    [values addWithId:[entry_ getValue]];
    hasComplexKeys |= ([((GsonJsonElement *) nil_chk(keyElement)) isJsonArray] || [keyElement isJsonObject]);
  }
  if (hasComplexKeys) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) beginArray];
    for (jint i = 0, size = [keys size]; i < size; i++) {
      (void) [outArg beginArray];
      GsonStreams_writeWithGsonJsonElement_withGsonJsonWriter_([keys getWithInt:i], outArg);
      [((GsonTypeAdapter *) nil_chk(valueTypeAdapter_)) writeWithGsonJsonWriter:outArg withId:[values getWithInt:i]];
      (void) [outArg endArray];
    }
    (void) [outArg endArray];
  }
  else {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) beginObject];
    for (jint i = 0, size = [keys size]; i < size; i++) {
      GsonJsonElement *keyElement = [keys getWithInt:i];
      (void) [outArg nameWithNSString:GsonMapTypeAdapterFactory_Adapter_keyToStringWithGsonJsonElement_(self, keyElement)];
      [((GsonTypeAdapter *) nil_chk(valueTypeAdapter_)) writeWithGsonJsonWriter:outArg withId:[values getWithInt:i]];
    }
    (void) [outArg endObject];
  }
}

- (NSString *)keyToStringWithGsonJsonElement:(GsonJsonElement *)keyElement {
  return GsonMapTypeAdapterFactory_Adapter_keyToStringWithGsonJsonElement_(self, keyElement);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, 8, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonMapTypeAdapterFactory:withGsonGson:withJavaLangReflectType:withGsonTypeAdapter:withJavaLangReflectType:withGsonTypeAdapter:withGsonObjectConstructor:);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[3].selector = @selector(keyToStringWithGsonJsonElement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonMapTypeAdapterFactory;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "keyTypeAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "valueTypeAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "constructor_", "LGsonObjectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "LGsonGson;LJavaLangReflectType;LGsonTypeAdapter;LJavaLangReflectType;LGsonTypeAdapter;LGsonObjectConstructor;", "(Lcom/google/gson/Gson;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter<TK;>;Ljava/lang/reflect/Type;Lcom/google/gson/TypeAdapter<TV;>;Lcom/google/gson/internal/ObjectConstructor<+Ljava/util/Map<TK;TV;>;>;)V", "read", "LGsonJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)Ljava/util/Map<TK;TV;>;", "write", "LGsonJsonWriter;LJavaUtilMap;", "(Lcom/google/gson/stream/JsonWriter;Ljava/util/Map<TK;TV;>;)V", "keyToString", "LGsonJsonElement;", "Lcom/google/gson/TypeAdapter<TK;>;", "Lcom/google/gson/TypeAdapter<TV;>;", "Lcom/google/gson/internal/ObjectConstructor<+Ljava/util/Map<TK;TV;>;>;", "LGsonMapTypeAdapterFactory;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<Ljava/util/Map<TK;TV;>;>;" };
  static const J2ObjcClassInfo _GsonMapTypeAdapterFactory_Adapter = { "Adapter", "j2objc.gson.internal.bind", ptrTable, methods, fields, 7, 0x12, 4, 4, 14, -1, -1, 15, -1 };
  return &_GsonMapTypeAdapterFactory_Adapter;
}

@end

void GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory_Adapter *self, GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor) {
  self->this$0_ = outer$;
  GsonTypeAdapter_init(self);
  self->keyTypeAdapter_ = new_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(context, keyTypeAdapter, keyType);
  self->valueTypeAdapter_ = new_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(context, valueTypeAdapter, valueType);
  self->constructor_ = constructor;
}

GsonMapTypeAdapterFactory_Adapter *new_GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor) {
  J2OBJC_NEW_IMPL(GsonMapTypeAdapterFactory_Adapter, initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_, outer$, context, keyType, keyTypeAdapter, valueType, valueTypeAdapter, constructor)
}

GsonMapTypeAdapterFactory_Adapter *create_GsonMapTypeAdapterFactory_Adapter_initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_(GsonMapTypeAdapterFactory *outer$, GsonGson *context, id<JavaLangReflectType> keyType, GsonTypeAdapter *keyTypeAdapter, id<JavaLangReflectType> valueType, GsonTypeAdapter *valueTypeAdapter, id<GsonObjectConstructor> constructor) {
  J2OBJC_CREATE_IMPL(GsonMapTypeAdapterFactory_Adapter, initWithGsonMapTypeAdapterFactory_withGsonGson_withJavaLangReflectType_withGsonTypeAdapter_withJavaLangReflectType_withGsonTypeAdapter_withGsonObjectConstructor_, outer$, context, keyType, keyTypeAdapter, valueType, valueTypeAdapter, constructor)
}

NSString *GsonMapTypeAdapterFactory_Adapter_keyToStringWithGsonJsonElement_(GsonMapTypeAdapterFactory_Adapter *self, GsonJsonElement *keyElement) {
  if ([((GsonJsonElement *) nil_chk(keyElement)) isJsonPrimitive]) {
    GsonJsonPrimitive *primitive = [keyElement getAsJsonPrimitive];
    if ([((GsonJsonPrimitive *) nil_chk(primitive)) isNumber]) {
      return NSString_java_valueOf_([primitive getAsNumber]);
    }
    else if ([primitive isBoolean]) {
      return JavaLangBoolean_toStringWithBoolean_([primitive getAsBoolean]);
    }
    else if ([primitive isString]) {
      return [primitive getAsString];
    }
    else {
      @throw new_JavaLangAssertionError_init();
    }
  }
  else if ([keyElement isJsonNull]) {
    return @"null";
  }
  else {
    @throw new_JavaLangAssertionError_init();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonMapTypeAdapterFactory_Adapter)
