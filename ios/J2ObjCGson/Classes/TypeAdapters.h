//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TypeAdapters.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TypeAdapters")
#ifdef RESTRICT_TypeAdapters
#define INCLUDE_ALL_TypeAdapters 0
#else
#define INCLUDE_ALL_TypeAdapters 1
#endif
#undef RESTRICT_TypeAdapters

#if !defined (GsonTypeAdapters_) && (INCLUDE_ALL_TypeAdapters || defined(INCLUDE_GsonTypeAdapters))
#define GsonTypeAdapters_

@class GsonTypeAdapter;
@class GsonTypeToken;
@class IOSClass;
@protocol GsonTypeAdapterFactory;

@interface GsonTypeAdapters : NSObject

+ (GsonTypeAdapter *)CLASS;

+ (id<GsonTypeAdapterFactory>)CLASS_FACTORY;

+ (GsonTypeAdapter *)BIT_SET;

+ (id<GsonTypeAdapterFactory>)BIT_SET_FACTORY;

+ (GsonTypeAdapter *)BOOLEAN;

+ (GsonTypeAdapter *)BOOLEAN_AS_STRING;

+ (id<GsonTypeAdapterFactory>)BOOLEAN_FACTORY;

+ (GsonTypeAdapter *)BYTE;

+ (id<GsonTypeAdapterFactory>)BYTE_FACTORY;

+ (GsonTypeAdapter *)SHORT;

+ (id<GsonTypeAdapterFactory>)SHORT_FACTORY;

+ (GsonTypeAdapter *)INTEGER;

+ (id<GsonTypeAdapterFactory>)INTEGER_FACTORY;

+ (GsonTypeAdapter *)ATOMIC_INTEGER;

+ (id<GsonTypeAdapterFactory>)ATOMIC_INTEGER_FACTORY;

+ (GsonTypeAdapter *)ATOMIC_BOOLEAN;

+ (id<GsonTypeAdapterFactory>)ATOMIC_BOOLEAN_FACTORY;

+ (GsonTypeAdapter *)ATOMIC_INTEGER_ARRAY;

+ (id<GsonTypeAdapterFactory>)ATOMIC_INTEGER_ARRAY_FACTORY;

+ (GsonTypeAdapter *)LONG;

+ (GsonTypeAdapter *)FLOAT;

+ (GsonTypeAdapter *)DOUBLE;

+ (GsonTypeAdapter *)NUMBER;

+ (id<GsonTypeAdapterFactory>)NUMBER_FACTORY;

+ (GsonTypeAdapter *)CHARACTER;

+ (id<GsonTypeAdapterFactory>)CHARACTER_FACTORY;

+ (GsonTypeAdapter *)STRING;

+ (GsonTypeAdapter *)BIG_DECIMAL;

+ (GsonTypeAdapter *)BIG_INTEGER;

+ (id<GsonTypeAdapterFactory>)STRING_FACTORY;

+ (GsonTypeAdapter *)STRING_BUILDER;

+ (id<GsonTypeAdapterFactory>)STRING_BUILDER_FACTORY;

+ (GsonTypeAdapter *)STRING_BUFFER;

+ (id<GsonTypeAdapterFactory>)STRING_BUFFER_FACTORY;

+ (GsonTypeAdapter *)URL;

+ (id<GsonTypeAdapterFactory>)URL_FACTORY;

+ (GsonTypeAdapter *)URI;

+ (id<GsonTypeAdapterFactory>)URI_FACTORY;

+ (GsonTypeAdapter *)INET_ADDRESS;

+ (id<GsonTypeAdapterFactory>)INET_ADDRESS_FACTORY;

+ (GsonTypeAdapter *)UUID;

+ (id<GsonTypeAdapterFactory>)UUID_FACTORY;

+ (GsonTypeAdapter *)CURRENCY;

+ (id<GsonTypeAdapterFactory>)CURRENCY_FACTORY;

+ (id<GsonTypeAdapterFactory>)TIMESTAMP_FACTORY;

+ (GsonTypeAdapter *)CALENDAR;

+ (id<GsonTypeAdapterFactory>)CALENDAR_FACTORY;

+ (GsonTypeAdapter *)LOCALE;

+ (id<GsonTypeAdapterFactory>)LOCALE_FACTORY;

+ (GsonTypeAdapter *)JSON_ELEMENT;

+ (id<GsonTypeAdapterFactory>)JSON_ELEMENT_FACTORY;

+ (id<GsonTypeAdapterFactory>)ENUM_FACTORY;

#pragma mark Public

+ (id<GsonTypeAdapterFactory>)newFactoryWithIOSClass:(IOSClass *)unboxed
                                        withIOSClass:(IOSClass *)boxed
                                 withGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newFactoryWithIOSClass:(IOSClass *)type
                                 withGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newFactoryWithGsonTypeToken:(GsonTypeToken *)type
                                      withGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newFactoryForMultipleTypesWithIOSClass:(IOSClass *)base
                                                        withIOSClass:(IOSClass *)sub
                                                 withGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter OBJC_METHOD_FAMILY_NONE;

+ (id<GsonTypeAdapterFactory>)newTypeHierarchyFactoryWithIOSClass:(IOSClass *)clazz
                                              withGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(GsonTypeAdapters)

inline GsonTypeAdapter *GsonTypeAdapters_get_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CLASS, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_CLASS_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_CLASS_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CLASS_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_BIT_SET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BIT_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BIT_SET, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_BIT_SET_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_BIT_SET_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BIT_SET_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_BOOLEAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BOOLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BOOLEAN, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_BOOLEAN_AS_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BOOLEAN_AS_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BOOLEAN_AS_STRING, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_BOOLEAN_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_BOOLEAN_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BOOLEAN_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_BYTE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BYTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BYTE, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_BYTE_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_BYTE_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BYTE_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_SHORT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_SHORT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, SHORT, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_SHORT_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_SHORT_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, SHORT_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_INTEGER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_INTEGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, INTEGER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_INTEGER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_INTEGER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, INTEGER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_ATOMIC_INTEGER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_ATOMIC_INTEGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_INTEGER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_ATOMIC_INTEGER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_ATOMIC_INTEGER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_INTEGER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_ATOMIC_BOOLEAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_ATOMIC_BOOLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_BOOLEAN, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_ATOMIC_BOOLEAN_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_ATOMIC_BOOLEAN_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_BOOLEAN_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_ATOMIC_INTEGER_ARRAY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_ATOMIC_INTEGER_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_INTEGER_ARRAY, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_ATOMIC_INTEGER_ARRAY_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_ATOMIC_INTEGER_ARRAY_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ATOMIC_INTEGER_ARRAY_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_LONG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_LONG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, LONG, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_FLOAT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_FLOAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, FLOAT, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_DOUBLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_DOUBLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, DOUBLE, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_NUMBER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_NUMBER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, NUMBER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_NUMBER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_NUMBER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, NUMBER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_CHARACTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_CHARACTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CHARACTER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_CHARACTER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_CHARACTER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CHARACTER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_BIG_DECIMAL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BIG_DECIMAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BIG_DECIMAL, GsonTypeAdapter *)

inline GsonTypeAdapter *GsonTypeAdapters_get_BIG_INTEGER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_BIG_INTEGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, BIG_INTEGER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_STRING_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_STRING_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_STRING_BUILDER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_STRING_BUILDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING_BUILDER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_STRING_BUILDER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_STRING_BUILDER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING_BUILDER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_STRING_BUFFER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_STRING_BUFFER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING_BUFFER, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_STRING_BUFFER_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_STRING_BUFFER_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, STRING_BUFFER_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, URL, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_URL_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_URL_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, URL_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_URI(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_URI;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, URI, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_URI_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_URI_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, URI_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_INET_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_INET_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, INET_ADDRESS, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_INET_ADDRESS_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_INET_ADDRESS_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, INET_ADDRESS_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_UUID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_UUID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, UUID, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_UUID_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_UUID_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, UUID_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_CURRENCY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_CURRENCY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CURRENCY, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_CURRENCY_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_CURRENCY_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CURRENCY_FACTORY, id<GsonTypeAdapterFactory>)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_TIMESTAMP_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_TIMESTAMP_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, TIMESTAMP_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_CALENDAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_CALENDAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CALENDAR, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_CALENDAR_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_CALENDAR_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, CALENDAR_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_LOCALE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_LOCALE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, LOCALE, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_LOCALE_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_LOCALE_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, LOCALE_FACTORY, id<GsonTypeAdapterFactory>)

inline GsonTypeAdapter *GsonTypeAdapters_get_JSON_ELEMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT GsonTypeAdapter *GsonTypeAdapters_JSON_ELEMENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, JSON_ELEMENT, GsonTypeAdapter *)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_JSON_ELEMENT_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_JSON_ELEMENT_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, JSON_ELEMENT_FACTORY, id<GsonTypeAdapterFactory>)

inline id<GsonTypeAdapterFactory> GsonTypeAdapters_get_ENUM_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_ENUM_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonTypeAdapters, ENUM_FACTORY, id<GsonTypeAdapterFactory>)

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_newFactoryWithGsonTypeToken_withGsonTypeAdapter_(GsonTypeToken *type, GsonTypeAdapter *typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(IOSClass *type, GsonTypeAdapter *typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_(IOSClass *unboxed, IOSClass *boxed, GsonTypeAdapter *typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_newFactoryForMultipleTypesWithIOSClass_withIOSClass_withGsonTypeAdapter_(IOSClass *base, IOSClass *sub, GsonTypeAdapter *typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTypeAdapters_newTypeHierarchyFactoryWithIOSClass_withGsonTypeAdapter_(IOSClass *clazz, GsonTypeAdapter *typeAdapter);

J2OBJC_TYPE_LITERAL_HEADER(GsonTypeAdapters)

@compatibility_alias ComGoogleGsonInternalBindTypeAdapters GsonTypeAdapters;

#endif

#pragma pop_macro("INCLUDE_ALL_TypeAdapters")
