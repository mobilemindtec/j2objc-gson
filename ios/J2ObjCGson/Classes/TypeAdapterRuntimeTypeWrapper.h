//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TypeAdapterRuntimeTypeWrapper.java
//

#ifndef TypeAdapterRuntimeTypeWrapper_H
#define TypeAdapterRuntimeTypeWrapper_H

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#include "J2ObjC_header.h"
#include "TypeAdapter.h"

@class GsonGson;
@class GsonJsonReader;
@class GsonJsonWriter;
@protocol JavaLangReflectType;

@interface GsonTypeAdapterRuntimeTypeWrapper : GsonTypeAdapter

#pragma mark Public

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

#pragma mark Package-Private

- (instancetype __nonnull)initWithGsonGson:(GsonGson *)context
                       withGsonTypeAdapter:(GsonTypeAdapter *)delegate
                   withJavaLangReflectType:(id<JavaLangReflectType>)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonTypeAdapterRuntimeTypeWrapper)

FOUNDATION_EXPORT void GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(GsonTypeAdapterRuntimeTypeWrapper *self, GsonGson *context, GsonTypeAdapter *delegate, id<JavaLangReflectType> type);

FOUNDATION_EXPORT GsonTypeAdapterRuntimeTypeWrapper *new_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(GsonGson *context, GsonTypeAdapter *delegate, id<JavaLangReflectType> type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonTypeAdapterRuntimeTypeWrapper *create_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(GsonGson *context, GsonTypeAdapter *delegate, id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(GsonTypeAdapterRuntimeTypeWrapper)

@compatibility_alias ComGoogleGsonInternalBindTypeAdapterRuntimeTypeWrapper GsonTypeAdapterRuntimeTypeWrapper;


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#endif // TypeAdapterRuntimeTypeWrapper_H
