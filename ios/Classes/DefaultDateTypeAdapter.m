//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/DefaultDateTypeAdapter.java
//

#include "DefaultDateTypeAdapter.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonDeserializationContext.h"
#include "JsonElement.h"
#include "JsonParseException.h"
#include "JsonPrimitive.h"
#include "JsonSerializationContext.h"
#include "JsonSyntaxException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Type.h"
#include "java/sql/Date.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface GsonDefaultDateTypeAdapter () {
 @public
  JavaTextDateFormat *enUsFormat_;
  JavaTextDateFormat *localFormat_;
  JavaTextDateFormat *iso8601Format_;
}

- (JavaUtilDate *)deserializeToDateWithGsonJsonElement:(GsonJsonElement *)json;

@end

J2OBJC_FIELD_SETTER(GsonDefaultDateTypeAdapter, enUsFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(GsonDefaultDateTypeAdapter, localFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(GsonDefaultDateTypeAdapter, iso8601Format_, JavaTextDateFormat *)

__attribute__((unused)) static JavaUtilDate *GsonDefaultDateTypeAdapter_deserializeToDateWithGsonJsonElement_(GsonDefaultDateTypeAdapter *self, GsonJsonElement *json);

@implementation GsonDefaultDateTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonDefaultDateTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)datePattern {
  GsonDefaultDateTypeAdapter_initWithNSString_(self, datePattern);
  return self;
}

- (instancetype)initWithInt:(jint)style {
  GsonDefaultDateTypeAdapter_initWithInt_(self, style);
  return self;
}

- (instancetype)initWithInt:(jint)dateStyle
                    withInt:(jint)timeStyle {
  GsonDefaultDateTypeAdapter_initWithInt_withInt_(self, dateStyle, timeStyle);
  return self;
}

- (instancetype)initWithJavaTextDateFormat:(JavaTextDateFormat *)enUsFormat
                    withJavaTextDateFormat:(JavaTextDateFormat *)localFormat {
  GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, enUsFormat, localFormat);
  return self;
}

- (GsonJsonElement *)serializeWithId:(JavaUtilDate *)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
    withGsonJsonSerializationContext:(id<GsonJsonSerializationContext>)context {
  @synchronized(localFormat_) {
    NSString *dateFormatAsString = [((JavaTextDateFormat *) nil_chk(enUsFormat_)) formatWithJavaUtilDate:src];
    return new_GsonJsonPrimitive_initWithNSString_(dateFormatAsString);
  }
}

- (JavaUtilDate *)deserializeWithGsonJsonElement:(GsonJsonElement *)json
                         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
              withGsonJsonDeserializationContext:(id<GsonJsonDeserializationContext>)context {
  if (!([json isKindOfClass:[GsonJsonPrimitive class]])) {
    @throw new_GsonJsonParseException_initWithNSString_(@"The date should be a string value");
  }
  JavaUtilDate *date = GsonDefaultDateTypeAdapter_deserializeToDateWithGsonJsonElement_(self, json);
  if (typeOfT == (id) JavaUtilDate_class_()) {
    return date;
  }
  else if (typeOfT == (id) JavaSqlTimestamp_class_()) {
    return new_JavaSqlTimestamp_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else if (typeOfT == (id) JavaSqlDate_class_()) {
    return new_JavaSqlDate_initWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$@", [self java_getClass], @" cannot deserialize to ", typeOfT));
  }
}

- (JavaUtilDate *)deserializeToDateWithGsonJsonElement:(GsonJsonElement *)json {
  return GsonDefaultDateTypeAdapter_deserializeToDateWithGsonJsonElement_(self, json);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:[GsonDefaultDateTypeAdapter_class_() getSimpleName]];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'('])) appendWithNSString:[[((JavaTextDateFormat *) nil_chk(localFormat_)) java_getClass] getSimpleName]])) appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithInt:withInt:);
  methods[4].selector = @selector(initWithJavaTextDateFormat:withJavaTextDateFormat:);
  methods[5].selector = @selector(serializeWithId:withJavaLangReflectType:withGsonJsonSerializationContext:);
  methods[6].selector = @selector(deserializeWithGsonJsonElement:withJavaLangReflectType:withGsonJsonDeserializationContext:);
  methods[7].selector = @selector(deserializeToDateWithGsonJsonElement:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "enUsFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "localFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iso8601Format_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "I", "II", "LJavaTextDateFormat;LJavaTextDateFormat;", "serialize", "LJavaUtilDate;LJavaLangReflectType;LGsonJsonSerializationContext;", "deserialize", "LGsonJsonElement;LJavaLangReflectType;LGsonJsonDeserializationContext;", "LGsonJsonParseException;", "deserializeToDate", "LGsonJsonElement;", "toString", "Ljava/lang/Object;Lcom/google/gson/JsonSerializer<Ljava/util/Date;>;Lcom/google/gson/JsonDeserializer<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _GsonDefaultDateTypeAdapter = { "DefaultDateTypeAdapter", "com.google.gson", ptrTable, methods, fields, 7, 0x10, 9, 3, -1, -1, -1, 12, -1 };
  return &_GsonDefaultDateTypeAdapter;
}

@end

void GsonDefaultDateTypeAdapter_init(GsonDefaultDateTypeAdapter *self) {
  GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT));
}

GsonDefaultDateTypeAdapter *new_GsonDefaultDateTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GsonDefaultDateTypeAdapter, init)
}

GsonDefaultDateTypeAdapter *create_GsonDefaultDateTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GsonDefaultDateTypeAdapter, init)
}

void GsonDefaultDateTypeAdapter_initWithNSString_(GsonDefaultDateTypeAdapter *self, NSString *datePattern) {
  GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(datePattern, JreLoadStatic(JavaUtilLocale, US)), new_JavaTextSimpleDateFormat_initWithNSString_(datePattern));
}

GsonDefaultDateTypeAdapter *new_GsonDefaultDateTypeAdapter_initWithNSString_(NSString *datePattern) {
  J2OBJC_NEW_IMPL(GsonDefaultDateTypeAdapter, initWithNSString_, datePattern)
}

GsonDefaultDateTypeAdapter *create_GsonDefaultDateTypeAdapter_initWithNSString_(NSString *datePattern) {
  J2OBJC_CREATE_IMPL(GsonDefaultDateTypeAdapter, initWithNSString_, datePattern)
}

void GsonDefaultDateTypeAdapter_initWithInt_(GsonDefaultDateTypeAdapter *self, jint style) {
  GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(style, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateInstanceWithInt_(style));
}

GsonDefaultDateTypeAdapter *new_GsonDefaultDateTypeAdapter_initWithInt_(jint style) {
  J2OBJC_NEW_IMPL(GsonDefaultDateTypeAdapter, initWithInt_, style)
}

GsonDefaultDateTypeAdapter *create_GsonDefaultDateTypeAdapter_initWithInt_(jint style) {
  J2OBJC_CREATE_IMPL(GsonDefaultDateTypeAdapter, initWithInt_, style)
}

void GsonDefaultDateTypeAdapter_initWithInt_withInt_(GsonDefaultDateTypeAdapter *self, jint dateStyle, jint timeStyle) {
  GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(self, JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(dateStyle, timeStyle, JreLoadStatic(JavaUtilLocale, US)), JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(dateStyle, timeStyle));
}

GsonDefaultDateTypeAdapter *new_GsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  J2OBJC_NEW_IMPL(GsonDefaultDateTypeAdapter, initWithInt_withInt_, dateStyle, timeStyle)
}

GsonDefaultDateTypeAdapter *create_GsonDefaultDateTypeAdapter_initWithInt_withInt_(jint dateStyle, jint timeStyle) {
  J2OBJC_CREATE_IMPL(GsonDefaultDateTypeAdapter, initWithInt_withInt_, dateStyle, timeStyle)
}

void GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(GsonDefaultDateTypeAdapter *self, JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  NSObject_init(self);
  self->enUsFormat_ = enUsFormat;
  self->localFormat_ = localFormat;
  self->iso8601Format_ = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyy-MM-dd'T'HH:mm:ss'Z'", JreLoadStatic(JavaUtilLocale, US));
  [self->iso8601Format_ setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC")];
}

GsonDefaultDateTypeAdapter *new_GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  J2OBJC_NEW_IMPL(GsonDefaultDateTypeAdapter, initWithJavaTextDateFormat_withJavaTextDateFormat_, enUsFormat, localFormat)
}

GsonDefaultDateTypeAdapter *create_GsonDefaultDateTypeAdapter_initWithJavaTextDateFormat_withJavaTextDateFormat_(JavaTextDateFormat *enUsFormat, JavaTextDateFormat *localFormat) {
  J2OBJC_CREATE_IMPL(GsonDefaultDateTypeAdapter, initWithJavaTextDateFormat_withJavaTextDateFormat_, enUsFormat, localFormat)
}

JavaUtilDate *GsonDefaultDateTypeAdapter_deserializeToDateWithGsonJsonElement_(GsonDefaultDateTypeAdapter *self, GsonJsonElement *json) {
  @synchronized(self->localFormat_) {
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->localFormat_)) parseWithNSString:[((GsonJsonElement *) nil_chk(json)) getAsString]];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->enUsFormat_)) parseWithNSString:[json getAsString]];
    }
    @catch (JavaTextParseException *ignored) {
    }
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->iso8601Format_)) parseWithNSString:[json getAsString]];
    }
    @catch (JavaTextParseException *e) {
      @throw new_GsonJsonSyntaxException_initWithNSString_withJavaLangThrowable_([json getAsString], e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonDefaultDateTypeAdapter)
