//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TypeAdapter.java
//

#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonReader.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "JsonTreeWriter.h"
#include "JsonWriter.h"
#include "TypeAdapter.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/AssertionError.h"

__attribute__((unused)) static void GsonTypeAdapter_toJsonWithJavaIoWriter_withId_(GsonTypeAdapter *self, JavaIoWriter *outArg, id value);

__attribute__((unused)) static id GsonTypeAdapter_fromJsonWithJavaIoReader_(GsonTypeAdapter *self, JavaIoReader *inArg);

@interface GsonTypeAdapter_1 : GsonTypeAdapter {
 @public
  GsonTypeAdapter *this$0_;
}

- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)outer$;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

- (id)readWithGsonJsonReader:(GsonJsonReader *)reader;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonTypeAdapter_1)

__attribute__((unused)) static void GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter_1 *self, GsonTypeAdapter *outer$);

__attribute__((unused)) static GsonTypeAdapter_1 *new_GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonTypeAdapter_1 *create_GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter *outer$);

@implementation GsonTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)toJsonWithJavaIoWriter:(JavaIoWriter *)outArg
                        withId:(id)value {
  GsonTypeAdapter_toJsonWithJavaIoWriter_withId_(self, outArg, value);
}

- (GsonTypeAdapter *)nullSafe {
  return new_GsonTypeAdapter_1_initWithGsonTypeAdapter_(self);
}

- (NSString *)toJsonWithId:(id)value {
  JavaIoStringWriter *stringWriter = new_JavaIoStringWriter_init();
  @try {
    GsonTypeAdapter_toJsonWithJavaIoWriter_withId_(self, stringWriter, value);
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  return [stringWriter description];
}

- (GsonJsonElement *)toJsonTreeWithId:(id)value {
  @try {
    GsonJsonTreeWriter *jsonWriter = new_GsonJsonTreeWriter_init();
    [self writeWithGsonJsonWriter:jsonWriter withId:value];
    return [jsonWriter get];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)inArg {
  return GsonTypeAdapter_fromJsonWithJavaIoReader_(self, inArg);
}

- (id)fromJsonWithNSString:(NSString *)json {
  return GsonTypeAdapter_fromJsonWithJavaIoReader_(self, new_JavaIoStringReader_initWithNSString_(json));
}

- (id)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)jsonTree {
  @try {
    GsonJsonReader *jsonReader = new_GsonJsonTreeReader_initWithGsonJsonElement_(jsonTree);
    return [self readWithGsonJsonReader:jsonReader];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 2, 6, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x11, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x11, 4, 8, -1, 9, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x11, 10, 8, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x401, 12, 13, 2, 14, -1, -1 },
    { NULL, "LNSObject;", 0x11, 15, 16, 2, 17, -1, -1 },
    { NULL, "LNSObject;", 0x11, 15, 18, 2, 19, -1, -1 },
    { NULL, "LNSObject;", 0x11, 20, 21, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[2].selector = @selector(toJsonWithJavaIoWriter:withId:);
  methods[3].selector = @selector(nullSafe);
  methods[4].selector = @selector(toJsonWithId:);
  methods[5].selector = @selector(toJsonTreeWithId:);
  methods[6].selector = @selector(readWithGsonJsonReader:);
  methods[7].selector = @selector(fromJsonWithJavaIoReader:);
  methods[8].selector = @selector(fromJsonWithNSString:);
  methods[9].selector = @selector(fromJsonTreeWithGsonJsonElement:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "write", "LGsonJsonWriter;LNSObject;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "toJson", "LJavaIoWriter;LNSObject;", "(Ljava/io/Writer;TT;)V", "()Lcom/google/gson/TypeAdapter<TT;>;", "LNSObject;", "(TT;)Ljava/lang/String;", "toJsonTree", "(TT;)Lcom/google/gson/JsonElement;", "read", "LGsonJsonReader;", "(Lcom/google/gson/stream/JsonReader;)TT;", "fromJson", "LJavaIoReader;", "(Ljava/io/Reader;)TT;", "LNSString;", "(Ljava/lang/String;)TT;", "fromJsonTree", "LGsonJsonElement;", "(Lcom/google/gson/JsonElement;)TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _GsonTypeAdapter = { "TypeAdapter", "com.google.gson", ptrTable, methods, NULL, 7, 0x401, 10, 0, -1, -1, -1, 23, -1 };
  return &_GsonTypeAdapter;
}

@end

void GsonTypeAdapter_init(GsonTypeAdapter *self) {
  NSObject_init(self);
}

void GsonTypeAdapter_toJsonWithJavaIoWriter_withId_(GsonTypeAdapter *self, JavaIoWriter *outArg, id value) {
  GsonJsonWriter *writer = new_GsonJsonWriter_initWithJavaIoWriter_(outArg);
  [self writeWithGsonJsonWriter:writer withId:value];
}

id GsonTypeAdapter_fromJsonWithJavaIoReader_(GsonTypeAdapter *self, JavaIoReader *inArg) {
  GsonJsonReader *reader = new_GsonJsonReader_initWithJavaIoReader_(inArg);
  return [self readWithGsonJsonReader:reader];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonTypeAdapter)

@implementation GsonTypeAdapter_1

- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)outer$ {
  GsonTypeAdapter_1_initWithGsonTypeAdapter_(self, outer$);
  return self;
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
  }
  else {
    [this$0_ writeWithGsonJsonWriter:outArg withId:value];
  }
}

- (id)readWithGsonJsonReader:(GsonJsonReader *)reader {
  if ([((GsonJsonReader *) nil_chk(reader)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [reader nextNull];
    return nil;
  }
  return [this$0_ readWithGsonJsonReader:reader];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, 2, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonTypeAdapter:);
  methods[1].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[2].selector = @selector(readWithGsonJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "write", "LGsonJsonWriter;LNSObject;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "read", "LGsonJsonReader;", "(Lcom/google/gson/stream/JsonReader;)TT;", "Lcom/google/gson/TypeAdapter<TT;>;", "LGsonTypeAdapter;", "nullSafe" };
  static const J2ObjcClassInfo _GsonTypeAdapter_1 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 8, -1, 9, 7, -1 };
  return &_GsonTypeAdapter_1;
}

@end

void GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter_1 *self, GsonTypeAdapter *outer$) {
  self->this$0_ = outer$;
  GsonTypeAdapter_init(self);
}

GsonTypeAdapter_1 *new_GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter *outer$) {
  J2OBJC_NEW_IMPL(GsonTypeAdapter_1, initWithGsonTypeAdapter_, outer$)
}

GsonTypeAdapter_1 *create_GsonTypeAdapter_1_initWithGsonTypeAdapter_(GsonTypeAdapter *outer$) {
  J2OBJC_CREATE_IMPL(GsonTypeAdapter_1, initWithGsonTypeAdapter_, outer$)
}
