//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/FieldNamingPolicy.java
//

#include "FieldNamingPolicy.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Field.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GsonFieldNamingPolicy ()

+ (NSString *)separateCamelCaseWithNSString:(NSString *)name
                               withNSString:(NSString *)separator;

+ (NSString *)upperCaseFirstLetterWithNSString:(NSString *)name;

+ (NSString *)modifyStringWithChar:(jchar)firstCharacter
                      withNSString:(NSString *)srcString
                           withInt:(jint)indexOfSubstring;

@end

__attribute__((unused)) static void GsonFieldNamingPolicy_initWithNSString_withInt_(GsonFieldNamingPolicy *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy *new_GsonFieldNamingPolicy_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static NSString *GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_(NSString *name, NSString *separator);

__attribute__((unused)) static NSString *GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_(NSString *name);

__attribute__((unused)) static NSString *GsonFieldNamingPolicy_modifyStringWithChar_withNSString_withInt_(jchar firstCharacter, NSString *srcString, jint indexOfSubstring);

@interface GsonFieldNamingPolicy_1 : GsonFieldNamingPolicy

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonFieldNamingPolicy_1)

__attribute__((unused)) static void GsonFieldNamingPolicy_1_initWithNSString_withInt_(GsonFieldNamingPolicy_1 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy_1 *new_GsonFieldNamingPolicy_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GsonFieldNamingPolicy_2 : GsonFieldNamingPolicy

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonFieldNamingPolicy_2)

__attribute__((unused)) static void GsonFieldNamingPolicy_2_initWithNSString_withInt_(GsonFieldNamingPolicy_2 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy_2 *new_GsonFieldNamingPolicy_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GsonFieldNamingPolicy_3 : GsonFieldNamingPolicy

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonFieldNamingPolicy_3)

__attribute__((unused)) static void GsonFieldNamingPolicy_3_initWithNSString_withInt_(GsonFieldNamingPolicy_3 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy_3 *new_GsonFieldNamingPolicy_3_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GsonFieldNamingPolicy_4 : GsonFieldNamingPolicy

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonFieldNamingPolicy_4)

__attribute__((unused)) static void GsonFieldNamingPolicy_4_initWithNSString_withInt_(GsonFieldNamingPolicy_4 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy_4 *new_GsonFieldNamingPolicy_4_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GsonFieldNamingPolicy_5 : GsonFieldNamingPolicy

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonFieldNamingPolicy_5)

__attribute__((unused)) static void GsonFieldNamingPolicy_5_initWithNSString_withInt_(GsonFieldNamingPolicy_5 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GsonFieldNamingPolicy_5 *new_GsonFieldNamingPolicy_5_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(GsonFieldNamingPolicy)

GsonFieldNamingPolicy *GsonFieldNamingPolicy_values_[5];

@implementation GsonFieldNamingPolicy

+ (GsonFieldNamingPolicy *)IDENTITY {
  return JreEnum(GsonFieldNamingPolicy, IDENTITY);
}

+ (GsonFieldNamingPolicy *)UPPER_CAMEL_CASE {
  return JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE);
}

+ (GsonFieldNamingPolicy *)UPPER_CAMEL_CASE_WITH_SPACES {
  return JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES);
}

+ (GsonFieldNamingPolicy *)LOWER_CASE_WITH_UNDERSCORES {
  return JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES);
}

+ (GsonFieldNamingPolicy *)LOWER_CASE_WITH_DASHES {
  return JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES);
}

+ (NSString *)separateCamelCaseWithNSString:(NSString *)name
                               withNSString:(NSString *)separator {
  return GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_(name, separator);
}

+ (NSString *)upperCaseFirstLetterWithNSString:(NSString *)name {
  return GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_(name);
}

+ (NSString *)modifyStringWithChar:(jchar)firstCharacter
                      withNSString:(NSString *)srcString
                           withInt:(jint)indexOfSubstring {
  return GsonFieldNamingPolicy_modifyStringWithChar_withNSString_withInt_(firstCharacter, srcString, indexOfSubstring);
}

+ (IOSObjectArray *)values {
  return GsonFieldNamingPolicy_values();
}

+ (GsonFieldNamingPolicy *)valueOfWithNSString:(NSString *)name {
  return GsonFieldNamingPolicy_valueOfWithNSString_(name);
}

- (GsonFieldNamingPolicy_Enum)toNSEnum {
  return (GsonFieldNamingPolicy_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LGsonFieldNamingPolicy;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonFieldNamingPolicy;", 0x9, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(separateCamelCaseWithNSString:withNSString:);
  methods[1].selector = @selector(upperCaseFirstLetterWithNSString:);
  methods[2].selector = @selector(modifyStringWithChar:withNSString:withInt:);
  methods[3].selector = @selector(values);
  methods[4].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IDENTITY", "LGsonFieldNamingPolicy;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "UPPER_CAMEL_CASE", "LGsonFieldNamingPolicy;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "UPPER_CAMEL_CASE_WITH_SPACES", "LGsonFieldNamingPolicy;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "LOWER_CASE_WITH_UNDERSCORES", "LGsonFieldNamingPolicy;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "LOWER_CASE_WITH_DASHES", "LGsonFieldNamingPolicy;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "separateCamelCase", "LNSString;LNSString;", "upperCaseFirstLetter", "LNSString;", "modifyString", "CLNSString;I", "valueOf", &JreEnum(GsonFieldNamingPolicy, IDENTITY), &JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE), &JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES), &JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES), &JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES), "Ljava/lang/Enum<Lcom/google/gson/FieldNamingPolicy;>;Lcom/google/gson/FieldNamingStrategy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy = { "FieldNamingPolicy", "com.google.gson", ptrTable, methods, fields, 7, 0x4401, 5, 5, -1, -1, -1, 12, -1 };
  return &_GsonFieldNamingPolicy;
}

+ (void)initialize {
  if (self == [GsonFieldNamingPolicy class]) {
    JreEnum(GsonFieldNamingPolicy, IDENTITY) = new_GsonFieldNamingPolicy_1_initWithNSString_withInt_(@"", 0);
    JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE) = new_GsonFieldNamingPolicy_2_initWithNSString_withInt_(@"", 1);
    JreEnum(GsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES) = new_GsonFieldNamingPolicy_3_initWithNSString_withInt_(@"", 2);
    JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES) = new_GsonFieldNamingPolicy_4_initWithNSString_withInt_(@"", 3);
    JreEnum(GsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES) = new_GsonFieldNamingPolicy_5_initWithNSString_withInt_(@"", 4);
    J2OBJC_SET_INITIALIZED(GsonFieldNamingPolicy)
  }
}

@end

void GsonFieldNamingPolicy_initWithNSString_withInt_(GsonFieldNamingPolicy *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy *new_GsonFieldNamingPolicy_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy, initWithNSString_withInt_, __name, __ordinal)
}

NSString *GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_(NSString *name, NSString *separator) {
  GsonFieldNamingPolicy_initialize();
  JavaLangStringBuilder *translation = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((NSString *) nil_chk(name)) java_length]; i++) {
    jchar character = [name charAtWithInt:i];
    if (JavaLangCharacter_isUpperCaseWithChar_(character) && [translation java_length] != 0) {
      (void) [translation appendWithNSString:separator];
    }
    (void) [translation appendWithChar:character];
  }
  return [translation description];
}

NSString *GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_(NSString *name) {
  GsonFieldNamingPolicy_initialize();
  JavaLangStringBuilder *fieldNameBuilder = new_JavaLangStringBuilder_init();
  jint index = 0;
  jchar firstCharacter = [((NSString *) nil_chk(name)) charAtWithInt:index];
  while (index < [name java_length] - 1) {
    if (JavaLangCharacter_isLetterWithChar_(firstCharacter)) {
      break;
    }
    (void) [fieldNameBuilder appendWithChar:firstCharacter];
    firstCharacter = [name charAtWithInt:++index];
  }
  if (index == [name java_length]) {
    return [fieldNameBuilder description];
  }
  if (!JavaLangCharacter_isUpperCaseWithChar_(firstCharacter)) {
    NSString *modifiedTarget = GsonFieldNamingPolicy_modifyStringWithChar_withNSString_withInt_(JavaLangCharacter_toUpperCaseWithChar_(firstCharacter), name, ++index);
    return [((JavaLangStringBuilder *) nil_chk([fieldNameBuilder appendWithNSString:modifiedTarget])) description];
  }
  else {
    return name;
  }
}

NSString *GsonFieldNamingPolicy_modifyStringWithChar_withNSString_withInt_(jchar firstCharacter, NSString *srcString, jint indexOfSubstring) {
  GsonFieldNamingPolicy_initialize();
  return (indexOfSubstring < [((NSString *) nil_chk(srcString)) java_length]) ? JreStrcat("C$", firstCharacter, [srcString java_substring:indexOfSubstring]) : NSString_java_valueOfChar_(firstCharacter);
}

IOSObjectArray *GsonFieldNamingPolicy_values() {
  GsonFieldNamingPolicy_initialize();
  return [IOSObjectArray arrayWithObjects:GsonFieldNamingPolicy_values_ count:5 type:GsonFieldNamingPolicy_class_()];
}

GsonFieldNamingPolicy *GsonFieldNamingPolicy_valueOfWithNSString_(NSString *name) {
  GsonFieldNamingPolicy_initialize();
  for (int i = 0; i < 5; i++) {
    GsonFieldNamingPolicy *e = GsonFieldNamingPolicy_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

GsonFieldNamingPolicy *GsonFieldNamingPolicy_fromOrdinal(NSUInteger ordinal) {
  GsonFieldNamingPolicy_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return GsonFieldNamingPolicy_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonFieldNamingPolicy)

@implementation GsonFieldNamingPolicy_1

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return [((JavaLangReflectField *) nil_chk(f)) getName];
}

- (void)dealloc {
  JreCheckFinalize(self, [GsonFieldNamingPolicy_1 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LGsonFieldNamingPolicy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy_1 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_GsonFieldNamingPolicy_1;
}

@end

void GsonFieldNamingPolicy_1_initWithNSString_withInt_(GsonFieldNamingPolicy_1 *self, NSString *__name, jint __ordinal) {
  GsonFieldNamingPolicy_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy_1 *new_GsonFieldNamingPolicy_1_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy_1, initWithNSString_withInt_, __name, __ordinal)
}

@implementation GsonFieldNamingPolicy_2

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_([((JavaLangReflectField *) nil_chk(f)) getName]);
}

- (void)dealloc {
  JreCheckFinalize(self, [GsonFieldNamingPolicy_2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LGsonFieldNamingPolicy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy_2 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_GsonFieldNamingPolicy_2;
}

@end

void GsonFieldNamingPolicy_2_initWithNSString_withInt_(GsonFieldNamingPolicy_2 *self, NSString *__name, jint __ordinal) {
  GsonFieldNamingPolicy_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy_2 *new_GsonFieldNamingPolicy_2_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy_2, initWithNSString_withInt_, __name, __ordinal)
}

@implementation GsonFieldNamingPolicy_3

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_(GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_([((JavaLangReflectField *) nil_chk(f)) getName], @" "));
}

- (void)dealloc {
  JreCheckFinalize(self, [GsonFieldNamingPolicy_3 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LGsonFieldNamingPolicy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy_3 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_GsonFieldNamingPolicy_3;
}

@end

void GsonFieldNamingPolicy_3_initWithNSString_withInt_(GsonFieldNamingPolicy_3 *self, NSString *__name, jint __ordinal) {
  GsonFieldNamingPolicy_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy_3 *new_GsonFieldNamingPolicy_3_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy_3, initWithNSString_withInt_, __name, __ordinal)
}

@implementation GsonFieldNamingPolicy_4

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return [((NSString *) nil_chk(GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_([((JavaLangReflectField *) nil_chk(f)) getName], @"_"))) lowercaseString];
}

- (void)dealloc {
  JreCheckFinalize(self, [GsonFieldNamingPolicy_4 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LGsonFieldNamingPolicy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy_4 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_GsonFieldNamingPolicy_4;
}

@end

void GsonFieldNamingPolicy_4_initWithNSString_withInt_(GsonFieldNamingPolicy_4 *self, NSString *__name, jint __ordinal) {
  GsonFieldNamingPolicy_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy_4 *new_GsonFieldNamingPolicy_4_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy_4, initWithNSString_withInt_, __name, __ordinal)
}

@implementation GsonFieldNamingPolicy_5

- (NSString *)translateNameWithJavaLangReflectField:(JavaLangReflectField *)f {
  return [((NSString *) nil_chk(GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_([((JavaLangReflectField *) nil_chk(f)) getName], @"-"))) lowercaseString];
}

- (void)dealloc {
  JreCheckFinalize(self, [GsonFieldNamingPolicy_5 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(translateNameWithJavaLangReflectField:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "translateName", "LJavaLangReflectField;", "LGsonFieldNamingPolicy;" };
  static const J2ObjcClassInfo _GsonFieldNamingPolicy_5 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_GsonFieldNamingPolicy_5;
}

@end

void GsonFieldNamingPolicy_5_initWithNSString_withInt_(GsonFieldNamingPolicy_5 *self, NSString *__name, jint __ordinal) {
  GsonFieldNamingPolicy_initWithNSString_withInt_(self, __name, __ordinal);
}

GsonFieldNamingPolicy_5 *new_GsonFieldNamingPolicy_5_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(GsonFieldNamingPolicy_5, initWithNSString_withInt_, __name, __ordinal)
}
