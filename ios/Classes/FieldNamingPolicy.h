//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/FieldNamingPolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_FieldNamingPolicy")
#ifdef RESTRICT_FieldNamingPolicy
#define INCLUDE_ALL_FieldNamingPolicy 0
#else
#define INCLUDE_ALL_FieldNamingPolicy 1
#endif
#undef RESTRICT_FieldNamingPolicy

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonFieldNamingPolicy_) && (INCLUDE_ALL_FieldNamingPolicy || defined(INCLUDE_GsonFieldNamingPolicy))
#define GsonFieldNamingPolicy_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

#define RESTRICT_FieldNamingStrategy 1
#define INCLUDE_GsonFieldNamingStrategy 1
#include "FieldNamingStrategy.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, GsonFieldNamingPolicy_Enum) {
  GsonFieldNamingPolicy_Enum_IDENTITY = 0,
  GsonFieldNamingPolicy_Enum_UPPER_CAMEL_CASE = 1,
  GsonFieldNamingPolicy_Enum_UPPER_CAMEL_CASE_WITH_SPACES = 2,
  GsonFieldNamingPolicy_Enum_LOWER_CASE_WITH_UNDERSCORES = 3,
  GsonFieldNamingPolicy_Enum_LOWER_CASE_WITH_DASHES = 4,
};

@interface GsonFieldNamingPolicy : JavaLangEnum < GsonFieldNamingStrategy >

+ (GsonFieldNamingPolicy * __nonnull)IDENTITY;

+ (GsonFieldNamingPolicy * __nonnull)UPPER_CAMEL_CASE;

+ (GsonFieldNamingPolicy * __nonnull)UPPER_CAMEL_CASE_WITH_SPACES;

+ (GsonFieldNamingPolicy * __nonnull)LOWER_CASE_WITH_UNDERSCORES;

+ (GsonFieldNamingPolicy * __nonnull)LOWER_CASE_WITH_DASHES;

#pragma mark Public

+ (GsonFieldNamingPolicy *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

+ (NSString *)separateCamelCaseWithNSString:(NSString *)name
                               withNSString:(NSString *)separator;

+ (NSString *)upperCaseFirstLetterWithNSString:(NSString *)name;

- (GsonFieldNamingPolicy_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(GsonFieldNamingPolicy)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT GsonFieldNamingPolicy *GsonFieldNamingPolicy_values_[];

inline GsonFieldNamingPolicy *GsonFieldNamingPolicy_get_IDENTITY(void);
J2OBJC_ENUM_CONSTANT(GsonFieldNamingPolicy, IDENTITY)

inline GsonFieldNamingPolicy *GsonFieldNamingPolicy_get_UPPER_CAMEL_CASE(void);
J2OBJC_ENUM_CONSTANT(GsonFieldNamingPolicy, UPPER_CAMEL_CASE)

inline GsonFieldNamingPolicy *GsonFieldNamingPolicy_get_UPPER_CAMEL_CASE_WITH_SPACES(void);
J2OBJC_ENUM_CONSTANT(GsonFieldNamingPolicy, UPPER_CAMEL_CASE_WITH_SPACES)

inline GsonFieldNamingPolicy *GsonFieldNamingPolicy_get_LOWER_CASE_WITH_UNDERSCORES(void);
J2OBJC_ENUM_CONSTANT(GsonFieldNamingPolicy, LOWER_CASE_WITH_UNDERSCORES)

inline GsonFieldNamingPolicy *GsonFieldNamingPolicy_get_LOWER_CASE_WITH_DASHES(void);
J2OBJC_ENUM_CONSTANT(GsonFieldNamingPolicy, LOWER_CASE_WITH_DASHES)

FOUNDATION_EXPORT NSString *GsonFieldNamingPolicy_separateCamelCaseWithNSString_withNSString_(NSString *name, NSString *separator);

FOUNDATION_EXPORT NSString *GsonFieldNamingPolicy_upperCaseFirstLetterWithNSString_(NSString *name);

FOUNDATION_EXPORT IOSObjectArray *GsonFieldNamingPolicy_values(void);

FOUNDATION_EXPORT GsonFieldNamingPolicy *GsonFieldNamingPolicy_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT GsonFieldNamingPolicy *GsonFieldNamingPolicy_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(GsonFieldNamingPolicy)

@compatibility_alias ComGoogleGsonFieldNamingPolicy GsonFieldNamingPolicy;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_FieldNamingPolicy")
