//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/ReflectiveTypeAdapterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ReflectiveTypeAdapterFactory")
#ifdef RESTRICT_ReflectiveTypeAdapterFactory
#define INCLUDE_ALL_ReflectiveTypeAdapterFactory 0
#else
#define INCLUDE_ALL_ReflectiveTypeAdapterFactory 1
#endif
#undef RESTRICT_ReflectiveTypeAdapterFactory

#if !defined (GsonReflectiveTypeAdapterFactory_) && (INCLUDE_ALL_ReflectiveTypeAdapterFactory || defined(INCLUDE_GsonReflectiveTypeAdapterFactory))
#define GsonReflectiveTypeAdapterFactory_

#define RESTRICT_TypeAdapterFactory 1
#define INCLUDE_GsonTypeAdapterFactory 1
#include "TypeAdapterFactory.h"

@class GsonConstructorConstructor;
@class GsonExcluder;
@class GsonGson;
@class GsonTypeAdapter;
@class GsonTypeToken;
@class JavaLangReflectField;
@protocol GsonFieldNamingStrategy;

@interface GsonReflectiveTypeAdapterFactory : NSObject < GsonTypeAdapterFactory >

#pragma mark Public

- (instancetype)initWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor
                       withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingPolicy
                                  withGsonExcluder:(GsonExcluder *)excluder;

- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)type;

- (jboolean)excludeFieldWithJavaLangReflectField:(JavaLangReflectField *)f
                                     withBoolean:(jboolean)serialize;

#pragma mark Package-Private

+ (jboolean)excludeFieldWithJavaLangReflectField:(JavaLangReflectField *)f
                                     withBoolean:(jboolean)serialize
                                withGsonExcluder:(GsonExcluder *)excluder;

+ (NSString *)getFieldNameWithGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingPolicy
                             withJavaLangReflectField:(JavaLangReflectField *)f;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonReflectiveTypeAdapterFactory)

FOUNDATION_EXPORT void GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_(GsonReflectiveTypeAdapterFactory *self, GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder);

FOUNDATION_EXPORT GsonReflectiveTypeAdapterFactory *new_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_(GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonReflectiveTypeAdapterFactory *create_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_(GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder);

FOUNDATION_EXPORT jboolean GsonReflectiveTypeAdapterFactory_excludeFieldWithJavaLangReflectField_withBoolean_withGsonExcluder_(JavaLangReflectField *f, jboolean serialize, GsonExcluder *excluder);

FOUNDATION_EXPORT NSString *GsonReflectiveTypeAdapterFactory_getFieldNameWithGsonFieldNamingStrategy_withJavaLangReflectField_(id<GsonFieldNamingStrategy> fieldNamingPolicy, JavaLangReflectField *f);

J2OBJC_TYPE_LITERAL_HEADER(GsonReflectiveTypeAdapterFactory)

@compatibility_alias ComGoogleGsonInternalBindReflectiveTypeAdapterFactory GsonReflectiveTypeAdapterFactory;

#endif

#if !defined (GsonReflectiveTypeAdapterFactory_BoundField_) && (INCLUDE_ALL_ReflectiveTypeAdapterFactory || defined(INCLUDE_GsonReflectiveTypeAdapterFactory_BoundField))
#define GsonReflectiveTypeAdapterFactory_BoundField_

@class GsonJsonReader;
@class GsonJsonWriter;

@interface GsonReflectiveTypeAdapterFactory_BoundField : NSObject {
 @public
  NSString *name_;
  jboolean serialized_;
  jboolean deserialized_;
}

#pragma mark Protected

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)serialized
                     withBoolean:(jboolean)deserialized;

#pragma mark Package-Private

- (void)readWithGsonJsonReader:(GsonJsonReader *)reader
                        withId:(id)value;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)writer
                         withId:(id)value;

- (jboolean)writeFieldWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonReflectiveTypeAdapterFactory_BoundField)

J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory_BoundField, name_, NSString *)

FOUNDATION_EXPORT void GsonReflectiveTypeAdapterFactory_BoundField_initWithNSString_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory_BoundField *self, NSString *name, jboolean serialized, jboolean deserialized);

J2OBJC_TYPE_LITERAL_HEADER(GsonReflectiveTypeAdapterFactory_BoundField)

#endif

#if !defined (GsonReflectiveTypeAdapterFactory_Adapter_) && (INCLUDE_ALL_ReflectiveTypeAdapterFactory || defined(INCLUDE_GsonReflectiveTypeAdapterFactory_Adapter))
#define GsonReflectiveTypeAdapterFactory_Adapter_

#define RESTRICT_TypeAdapter 1
#define INCLUDE_GsonTypeAdapter 1
#include "TypeAdapter.h"

@class GsonJsonReader;
@class GsonJsonWriter;

@interface GsonReflectiveTypeAdapterFactory_Adapter : GsonTypeAdapter

#pragma mark Public

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonReflectiveTypeAdapterFactory_Adapter)

J2OBJC_TYPE_LITERAL_HEADER(GsonReflectiveTypeAdapterFactory_Adapter)

#endif

#pragma pop_macro("INCLUDE_ALL_ReflectiveTypeAdapterFactory")
