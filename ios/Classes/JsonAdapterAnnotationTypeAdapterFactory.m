//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/JsonAdapterAnnotationTypeAdapterFactory.java
//

#include "ConstructorConstructor.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonAdapter.h"
#include "JsonAdapterAnnotationTypeAdapterFactory.h"
#include "ObjectConstructor.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/lang/IllegalArgumentException.h"

@interface GsonJsonAdapterAnnotationTypeAdapterFactory () {
 @public
  GsonConstructorConstructor *constructorConstructor_;
}

@end

J2OBJC_FIELD_SETTER(GsonJsonAdapterAnnotationTypeAdapterFactory, constructorConstructor_, GsonConstructorConstructor *)

@implementation GsonJsonAdapterAnnotationTypeAdapterFactory

- (instancetype)initWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor {
  GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(self, constructorConstructor);
  return self;
}

- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)targetType {
  id<GsonJsonAdapter> annotation = ((id<GsonJsonAdapter>) [((IOSClass *) nil_chk([((GsonTypeToken *) nil_chk(targetType)) getRawType])) getAnnotationWithIOSClass:GsonJsonAdapter_class_()]);
  if (annotation == nil) {
    return nil;
  }
  return GsonJsonAdapterAnnotationTypeAdapterFactory_getTypeAdapterWithGsonConstructorConstructor_withGsonGson_withGsonTypeToken_withGsonJsonAdapter_(constructorConstructor_, gson, targetType, annotation);
}

+ (GsonTypeAdapter *)getTypeAdapterWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor
                                                     withGsonGson:(GsonGson *)gson
                                                withGsonTypeToken:(GsonTypeToken *)fieldType
                                              withGsonJsonAdapter:(id<GsonJsonAdapter>)annotation {
  return GsonJsonAdapterAnnotationTypeAdapterFactory_getTypeAdapterWithGsonConstructorConstructor_withGsonGson_withGsonTypeToken_withGsonJsonAdapter_(constructorConstructor, gson, fieldType, annotation);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x8, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonConstructorConstructor:);
  methods[1].selector = @selector(createWithGsonGson:withGsonTypeToken:);
  methods[2].selector = @selector(getTypeAdapterWithGsonConstructorConstructor:withGsonGson:withGsonTypeToken:withGsonJsonAdapter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonConstructorConstructor;", "create", "LGsonGson;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "getTypeAdapter", "LGsonConstructorConstructor;LGsonGson;LGsonTypeToken;LGsonJsonAdapter;", "(Lcom/google/gson/internal/ConstructorConstructor;Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/annotations/JsonAdapter;)Lcom/google/gson/TypeAdapter<*>;" };
  static const J2ObjcClassInfo _GsonJsonAdapterAnnotationTypeAdapterFactory = { "JsonAdapterAnnotationTypeAdapterFactory", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_GsonJsonAdapterAnnotationTypeAdapterFactory;
}

@end

void GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonJsonAdapterAnnotationTypeAdapterFactory *self, GsonConstructorConstructor *constructorConstructor) {
  NSObject_init(self);
  self->constructorConstructor_ = constructorConstructor;
}

GsonJsonAdapterAnnotationTypeAdapterFactory *new_GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonConstructorConstructor *constructorConstructor) {
  J2OBJC_NEW_IMPL(GsonJsonAdapterAnnotationTypeAdapterFactory, initWithGsonConstructorConstructor_, constructorConstructor)
}

GsonJsonAdapterAnnotationTypeAdapterFactory *create_GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(GsonConstructorConstructor *constructorConstructor) {
  J2OBJC_CREATE_IMPL(GsonJsonAdapterAnnotationTypeAdapterFactory, initWithGsonConstructorConstructor_, constructorConstructor)
}

GsonTypeAdapter *GsonJsonAdapterAnnotationTypeAdapterFactory_getTypeAdapterWithGsonConstructorConstructor_withGsonGson_withGsonTypeToken_withGsonJsonAdapter_(GsonConstructorConstructor *constructorConstructor, GsonGson *gson, GsonTypeToken *fieldType, id<GsonJsonAdapter> annotation) {
  GsonJsonAdapterAnnotationTypeAdapterFactory_initialize();
  IOSClass *value = [((id<GsonJsonAdapter>) nil_chk(annotation)) value];
  if ([GsonTypeAdapter_class_() isAssignableFrom:value]) {
    IOSClass *typeAdapter = value;
    return [((id<GsonObjectConstructor>) nil_chk([((GsonConstructorConstructor *) nil_chk(constructorConstructor)) getWithGsonTypeToken:GsonTypeToken_getWithIOSClass_(typeAdapter)])) construct];
  }
  if ([GsonTypeAdapterFactory_class_() isAssignableFrom:value]) {
    IOSClass *typeAdapterFactory = value;
    return [((id<GsonTypeAdapterFactory>) nil_chk([((id<GsonObjectConstructor>) nil_chk([((GsonConstructorConstructor *) nil_chk(constructorConstructor)) getWithGsonTypeToken:GsonTypeToken_getWithIOSClass_(typeAdapterFactory)])) construct])) createWithGsonGson:gson withGsonTypeToken:fieldType];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonAdapterAnnotationTypeAdapterFactory)
