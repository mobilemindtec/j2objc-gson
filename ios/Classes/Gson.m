//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Gson.java
//

#include "ArrayTypeAdapter.h"
#include "CollectionTypeAdapterFactory.h"
#include "ConstructorConstructor.h"
#include "DateTypeAdapter.h"
#include "Excluder.h"
#include "FieldNamingPolicy.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonAdapterAnnotationTypeAdapterFactory.h"
#include "JsonDeserializationContext.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonNull.h"
#include "JsonReader.h"
#include "JsonSerializationContext.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "JsonTreeWriter.h"
#include "JsonWriter.h"
#include "LongSerializationPolicy.h"
#include "MalformedJsonException.h"
#include "MapTypeAdapterFactory.h"
#include "ObjectTypeAdapter.h"
#include "Primitives.h"
#include "ReflectiveTypeAdapterFactory.h"
#include "SqlDateTypeAdapter.h"
#include "Streams.h"
#include "TimeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GsonGson () {
 @public
  JavaLangThreadLocal *calls_;
  id<JavaUtilMap> typeTokenCache_;
  id<JavaUtilList> factories_;
  GsonConstructorConstructor *constructorConstructor_;
  jboolean serializeNulls_;
  jboolean htmlSafe_;
  jboolean generateNonExecutableJson_;
  jboolean prettyPrinting_;
}

- (GsonTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

- (GsonTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

- (void)checkValidFloatingPointWithDouble:(jdouble)value;

- (GsonTypeAdapter *)longAdapterWithGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy;

- (GsonJsonWriter *)newJsonWriterWithJavaIoWriter:(JavaIoWriter *)writer OBJC_METHOD_FAMILY_NONE;

+ (void)assertFullConsumptionWithId:(id)obj
                 withGsonJsonReader:(GsonJsonReader *)reader;

@end

J2OBJC_FIELD_SETTER(GsonGson, calls_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(GsonGson, typeTokenCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GsonGson, factories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGson, constructorConstructor_, GsonConstructorConstructor *)

inline NSString *GsonGson_get_JSON_NON_EXECUTABLE_PREFIX(void);
static NSString *GsonGson_JSON_NON_EXECUTABLE_PREFIX = @")]}'\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonGson, JSON_NON_EXECUTABLE_PREFIX, NSString *)

__attribute__((unused)) static GsonTypeAdapter *GsonGson_doubleAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_floatAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static void GsonGson_checkValidFloatingPointWithDouble_(GsonGson *self, jdouble value);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_longAdapterWithGsonLongSerializationPolicy_(GsonGson *self, GsonLongSerializationPolicy *longSerializationPolicy);

__attribute__((unused)) static GsonJsonWriter *GsonGson_newJsonWriterWithJavaIoWriter_(GsonGson *self, JavaIoWriter *writer);

__attribute__((unused)) static void GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(id obj, GsonJsonReader *reader);

@interface GsonGson_1 : NSObject < GsonJsonDeserializationContext > {
 @public
  GsonGson *this$0_;
}

- (instancetype)initWithGsonGson:(GsonGson *)outer$;

- (id)deserializeWithGsonJsonElement:(GsonJsonElement *)json
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_1)

__attribute__((unused)) static void GsonGson_1_initWithGsonGson_(GsonGson_1 *self, GsonGson *outer$);

__attribute__((unused)) static GsonGson_1 *new_GsonGson_1_initWithGsonGson_(GsonGson *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_1 *create_GsonGson_1_initWithGsonGson_(GsonGson *outer$);

@interface GsonGson_2 : NSObject < GsonJsonSerializationContext > {
 @public
  GsonGson *this$0_;
}

- (instancetype)initWithGsonGson:(GsonGson *)outer$;

- (GsonJsonElement *)serializeWithId:(id)src;

- (GsonJsonElement *)serializeWithId:(id)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_2)

__attribute__((unused)) static void GsonGson_2_initWithGsonGson_(GsonGson_2 *self, GsonGson *outer$);

__attribute__((unused)) static GsonGson_2 *new_GsonGson_2_initWithGsonGson_(GsonGson *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_2 *create_GsonGson_2_initWithGsonGson_(GsonGson *outer$);

@interface GsonGson_3 : GsonTypeAdapter {
 @public
  GsonGson *this$0_;
}

- (instancetype)initWithGsonGson:(GsonGson *)outer$;

- (JavaLangDouble *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_3)

__attribute__((unused)) static void GsonGson_3_initWithGsonGson_(GsonGson_3 *self, GsonGson *outer$);

__attribute__((unused)) static GsonGson_3 *new_GsonGson_3_initWithGsonGson_(GsonGson *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_3 *create_GsonGson_3_initWithGsonGson_(GsonGson *outer$);

@interface GsonGson_4 : GsonTypeAdapter {
 @public
  GsonGson *this$0_;
}

- (instancetype)initWithGsonGson:(GsonGson *)outer$;

- (JavaLangFloat *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_4)

__attribute__((unused)) static void GsonGson_4_initWithGsonGson_(GsonGson_4 *self, GsonGson *outer$);

__attribute__((unused)) static GsonGson_4 *new_GsonGson_4_initWithGsonGson_(GsonGson *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_4 *create_GsonGson_4_initWithGsonGson_(GsonGson *outer$);

@interface GsonGson_5 : GsonTypeAdapter

- (instancetype)init;

- (NSNumber *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_5)

__attribute__((unused)) static void GsonGson_5_init(GsonGson_5 *self);

__attribute__((unused)) static GsonGson_5 *new_GsonGson_5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_5 *create_GsonGson_5_init(void);

@interface GsonGson_FutureTypeAdapter () {
 @public
  GsonTypeAdapter *delegate_;
}

@end

J2OBJC_FIELD_SETTER(GsonGson_FutureTypeAdapter, delegate_, GsonTypeAdapter *)

@implementation GsonGson

+ (jboolean)DEFAULT_JSON_NON_EXECUTABLE {
  return GsonGson_DEFAULT_JSON_NON_EXECUTABLE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonGson_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithGsonExcluder:(GsonExcluder *)excluder
         withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingPolicy
                     withJavaUtilMap:(id<JavaUtilMap>)instanceCreators
                         withBoolean:(jboolean)serializeNulls
                         withBoolean:(jboolean)complexMapKeySerialization
                         withBoolean:(jboolean)generateNonExecutableGson
                         withBoolean:(jboolean)htmlSafe
                         withBoolean:(jboolean)prettyPrinting
                         withBoolean:(jboolean)serializeSpecialFloatingPointValues
     withGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy
                    withJavaUtilList:(id<JavaUtilList>)typeAdapterFactories {
  GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(self, excluder, fieldNamingPolicy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories);
  return self;
}

- (GsonTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GsonGson_doubleAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}

- (GsonTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GsonGson_floatAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}

- (void)checkValidFloatingPointWithDouble:(jdouble)value {
  GsonGson_checkValidFloatingPointWithDouble_(self, value);
}

- (GsonTypeAdapter *)longAdapterWithGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy {
  return GsonGson_longAdapterWithGsonLongSerializationPolicy_(self, longSerializationPolicy);
}

- (GsonTypeAdapter *)getAdapterWithGsonTypeToken:(GsonTypeToken *)type {
  GsonTypeAdapter *cached = [((id<JavaUtilMap>) nil_chk(typeTokenCache_)) getWithId:type];
  if (cached != nil) {
    return cached;
  }
  id<JavaUtilMap> threadCalls = [((JavaLangThreadLocal *) nil_chk(calls_)) get];
  jboolean requiresThreadLocalCleanup = false;
  if (threadCalls == nil) {
    threadCalls = new_JavaUtilHashMap_init();
    [calls_ setWithId:threadCalls];
    requiresThreadLocalCleanup = true;
  }
  GsonGson_FutureTypeAdapter *ongoingCall = [threadCalls getWithId:type];
  if (ongoingCall != nil) {
    return ongoingCall;
  }
  @try {
    GsonGson_FutureTypeAdapter *call = new_GsonGson_FutureTypeAdapter_init();
    (void) [threadCalls putWithId:type withId:call];
    for (id<GsonTypeAdapterFactory> __strong factory in nil_chk(factories_)) {
      GsonTypeAdapter *candidate = [((id<GsonTypeAdapterFactory>) nil_chk(factory)) createWithGsonGson:self withGsonTypeToken:type];
      if (candidate != nil) {
        [call setDelegateWithGsonTypeAdapter:candidate];
        (void) [typeTokenCache_ putWithId:type withId:candidate];
        return candidate;
      }
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"GSON cannot handle ", type));
  }
  @finally {
    (void) [threadCalls removeWithId:type];
    if (requiresThreadLocalCleanup) {
      [calls_ remove];
    }
  }
}

- (GsonTypeAdapter *)getDelegateAdapterWithGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast
                                                withGsonTypeToken:(GsonTypeToken *)type {
  jboolean skipPastFound = false;
  if (![((id<JavaUtilList>) nil_chk(factories_)) containsWithId:skipPast]) skipPastFound = true;
  for (id<GsonTypeAdapterFactory> __strong factory in factories_) {
    if (!skipPastFound) {
      if (factory == skipPast) {
        skipPastFound = true;
      }
      continue;
    }
    GsonTypeAdapter *candidate = [((id<GsonTypeAdapterFactory>) nil_chk(factory)) createWithGsonGson:self withGsonTypeToken:type];
    if (candidate != nil) {
      return candidate;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"GSON cannot serialize ", type));
}

- (GsonTypeAdapter *)getAdapterWithIOSClass:(IOSClass *)type {
  return [self getAdapterWithGsonTypeToken:GsonTypeToken_getWithIOSClass_(type)];
}

- (GsonJsonElement *)toJsonTreeWithId:(id)src {
  if (src == nil) {
    return JreLoadStatic(GsonJsonNull, INSTANCE);
  }
  return [self toJsonTreeWithId:src withJavaLangReflectType:[src java_getClass]];
}

- (GsonJsonElement *)toJsonTreeWithId:(id)src
              withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  GsonJsonTreeWriter *writer = new_GsonJsonTreeWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGsonJsonWriter:writer];
  return [writer get];
}

- (NSString *)toJsonWithId:(id)src {
  if (src == nil) {
    return [self toJsonWithGsonJsonElement:JreLoadStatic(GsonJsonNull, INSTANCE)];
  }
  return [self toJsonWithId:src withJavaLangReflectType:[src java_getClass]];
}

- (NSString *)toJsonWithId:(id)src
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withJavaLangAppendable:writer];
  return [writer description];
}

- (void)toJsonWithId:(id)src
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  if (src != nil) {
    [self toJsonWithId:src withJavaLangReflectType:[src java_getClass] withJavaLangAppendable:writer];
  }
  else {
    [self toJsonWithGsonJsonElement:JreLoadStatic(GsonJsonNull, INSTANCE) withJavaLangAppendable:writer];
  }
}

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GsonJsonWriter *jsonWriter = GsonGson_newJsonWriterWithJavaIoWriter_(self, GsonStreams_writerForAppendableWithJavaLangAppendable_(writer));
    [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGsonJsonWriter:jsonWriter];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
  withGsonJsonWriter:(GsonJsonWriter *)writer {
  GsonTypeAdapter *adapter = [self getAdapterWithGsonTypeToken:GsonTypeToken_getWithJavaLangReflectType_(typeOfSrc)];
  jboolean oldLenient = [((GsonJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    [((GsonTypeAdapter *) nil_chk((adapter))) writeWithGsonJsonWriter:writer withId:src];
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
  @finally {
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}

- (NSString *)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithGsonJsonElement:jsonElement withJavaLangAppendable:writer];
  return [writer description];
}

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
           withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GsonJsonWriter *jsonWriter = GsonGson_newJsonWriterWithJavaIoWriter_(self, GsonStreams_writerForAppendableWithJavaLangAppendable_(writer));
    [self toJsonWithGsonJsonElement:jsonElement withGsonJsonWriter:jsonWriter];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (GsonJsonWriter *)newJsonWriterWithJavaIoWriter:(JavaIoWriter *)writer {
  return GsonGson_newJsonWriterWithJavaIoWriter_(self, writer);
}

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
               withGsonJsonWriter:(GsonJsonWriter *)writer {
  jboolean oldLenient = [((GsonJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    GsonStreams_writeWithGsonJsonElement_withGsonJsonWriter_(jsonElement, writer);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
  @finally {
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}

- (id)fromJsonWithNSString:(NSString *)json
              withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithNSString:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithNSString:(NSString *)json
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  if (json == nil) {
    return nil;
  }
  JavaIoStringReader *reader = new_JavaIoStringReader_initWithNSString_(json);
  id target = [self fromJsonWithJavaIoReader:reader withJavaLangReflectType:typeOfT];
  return target;
}

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
                  withIOSClass:(IOSClass *)classOfT {
  GsonJsonReader *jsonReader = new_GsonJsonReader_initWithJavaIoReader_(json);
  id object = [self fromJsonWithGsonJsonReader:jsonReader withJavaLangReflectType:classOfT];
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(object, jsonReader);
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
       withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  GsonJsonReader *jsonReader = new_GsonJsonReader_initWithJavaIoReader_(json);
  id object = [self fromJsonWithGsonJsonReader:jsonReader withJavaLangReflectType:typeOfT];
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(object, jsonReader);
  return object;
}

+ (void)assertFullConsumptionWithId:(id)obj
                 withGsonJsonReader:(GsonJsonReader *)reader {
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(obj, reader);
}

- (id)fromJsonWithGsonJsonReader:(GsonJsonReader *)reader
         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  jboolean isEmpty = true;
  jboolean oldLenient = [((GsonJsonReader *) nil_chk(reader)) isLenient];
  [reader setLenientWithBoolean:true];
  @try {
    (void) [reader peek];
    isEmpty = false;
    GsonTypeToken *typeToken = GsonTypeToken_getWithJavaLangReflectType_(typeOfT);
    GsonTypeAdapter *typeAdapter = [self getAdapterWithGsonTypeToken:typeToken];
    id object = [((GsonTypeAdapter *) nil_chk(typeAdapter)) readWithGsonJsonReader:reader];
    return object;
  }
  @catch (JavaIoEOFException *e) {
    if (isEmpty) {
      return nil;
    }
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaLangIllegalStateException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @finally {
    [reader setLenientWithBoolean:oldLenient];
  }
}

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
                     withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithGsonJsonElement:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
          withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  if (json == nil) {
    return nil;
  }
  return [self fromJsonWithGsonJsonReader:new_GsonJsonTreeReader_initWithGsonJsonElement_(json) withJavaLangReflectType:typeOfT];
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(@"{serializeNulls:") appendWithBoolean:serializeNulls_])) appendWithNSString:@"factories:"])) appendWithId:factories_])) appendWithNSString:@",instanceCreators:"])) appendWithId:constructorConstructor_])) appendWithNSString:@"}"])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 11, 17, -1, 18, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 25, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 26, 24, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 28, 24, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x2, 29, 30, 31, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 32, 24, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 34, 35, 36, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 37, 35, 38, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 39, 40, 41, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 42, 43, 44, -1, -1 },
    { NULL, "V", 0xa, 45, 46, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 47, 43, 48, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 49, 35, 50, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 51, 35, 52, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithGsonExcluder:withGsonFieldNamingStrategy:withJavaUtilMap:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withGsonLongSerializationPolicy:withJavaUtilList:);
  methods[2].selector = @selector(doubleAdapterWithBoolean:);
  methods[3].selector = @selector(floatAdapterWithBoolean:);
  methods[4].selector = @selector(checkValidFloatingPointWithDouble:);
  methods[5].selector = @selector(longAdapterWithGsonLongSerializationPolicy:);
  methods[6].selector = @selector(getAdapterWithGsonTypeToken:);
  methods[7].selector = @selector(getDelegateAdapterWithGsonTypeAdapterFactory:withGsonTypeToken:);
  methods[8].selector = @selector(getAdapterWithIOSClass:);
  methods[9].selector = @selector(toJsonTreeWithId:);
  methods[10].selector = @selector(toJsonTreeWithId:withJavaLangReflectType:);
  methods[11].selector = @selector(toJsonWithId:);
  methods[12].selector = @selector(toJsonWithId:withJavaLangReflectType:);
  methods[13].selector = @selector(toJsonWithId:withJavaLangAppendable:);
  methods[14].selector = @selector(toJsonWithId:withJavaLangReflectType:withJavaLangAppendable:);
  methods[15].selector = @selector(toJsonWithId:withJavaLangReflectType:withGsonJsonWriter:);
  methods[16].selector = @selector(toJsonWithGsonJsonElement:);
  methods[17].selector = @selector(toJsonWithGsonJsonElement:withJavaLangAppendable:);
  methods[18].selector = @selector(newJsonWriterWithJavaIoWriter:);
  methods[19].selector = @selector(toJsonWithGsonJsonElement:withGsonJsonWriter:);
  methods[20].selector = @selector(fromJsonWithNSString:withIOSClass:);
  methods[21].selector = @selector(fromJsonWithNSString:withJavaLangReflectType:);
  methods[22].selector = @selector(fromJsonWithJavaIoReader:withIOSClass:);
  methods[23].selector = @selector(fromJsonWithJavaIoReader:withJavaLangReflectType:);
  methods[24].selector = @selector(assertFullConsumptionWithId:withGsonJsonReader:);
  methods[25].selector = @selector(fromJsonWithGsonJsonReader:withJavaLangReflectType:);
  methods[26].selector = @selector(fromJsonWithGsonJsonElement:withIOSClass:);
  methods[27].selector = @selector(fromJsonWithGsonJsonElement:withJavaLangReflectType:);
  methods[28].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_JSON_NON_EXECUTABLE", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_JSON_NON_EXECUTABLE, 0x18, -1, -1, -1, -1 },
    { "JSON_NON_EXECUTABLE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "calls_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 55, -1 },
    { "typeTokenCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 56, -1 },
    { "factories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 57, -1 },
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serializeNulls_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "htmlSafe_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "generateNonExecutableJson_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prettyPrinting_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "deserializationContext_", "LGsonJsonDeserializationContext;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serializationContext_", "LGsonJsonSerializationContext;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonExcluder;LGsonFieldNamingStrategy;LJavaUtilMap;ZZZZZZLGsonLongSerializationPolicy;LJavaUtilList;", "(Lcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;ZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;)V", "doubleAdapter", "Z", "(Z)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "floatAdapter", "checkValidFloatingPoint", "D", "longAdapter", "LGsonLongSerializationPolicy;", "(Lcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "getAdapter", "LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "getDelegateAdapter", "LGsonTypeAdapterFactory;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "toJsonTree", "LNSObject;", "LNSObject;LJavaLangReflectType;", "toJson", "LNSObject;LJavaLangAppendable;", "LGsonJsonIOException;", "LNSObject;LJavaLangReflectType;LJavaLangAppendable;", "LNSObject;LJavaLangReflectType;LGsonJsonWriter;", "LGsonJsonElement;", "LGsonJsonElement;LJavaLangAppendable;", "newJsonWriter", "LJavaIoWriter;", "LJavaIoIOException;", "LGsonJsonElement;LGsonJsonWriter;", "fromJson", "LNSString;LIOSClass;", "LGsonJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)TT;", "LNSString;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/reflect/Type;)TT;", "LJavaIoReader;LIOSClass;", "LGsonJsonSyntaxException;LGsonJsonIOException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/Class<TT;>;)TT;", "LJavaIoReader;LJavaLangReflectType;", "LGsonJsonIOException;LGsonJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/reflect/Type;)TT;", "assertFullConsumption", "LNSObject;LGsonJsonReader;", "LGsonJsonReader;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)TT;", "LGsonJsonElement;LIOSClass;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/Class<TT;>;)TT;", "LGsonJsonElement;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)TT;", "toString", &GsonGson_JSON_NON_EXECUTABLE_PREFIX, "Ljava/lang/ThreadLocal<Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/Gson$FutureTypeAdapter<*>;>;>;", "Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/TypeAdapter<*>;>;", "Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;", "LGsonGson_FutureTypeAdapter;" };
  static const J2ObjcClassInfo _GsonGson = { "Gson", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 29, 12, -1, 58, -1, -1, -1 };
  return &_GsonGson;
}

@end

void GsonGson_init(GsonGson *self) {
  GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(self, JreLoadStatic(GsonExcluder, DEFAULT), JreLoadEnum(GsonFieldNamingPolicy, IDENTITY), JavaUtilCollections_emptyMap(), false, false, GsonGson_DEFAULT_JSON_NON_EXECUTABLE, true, false, false, JreLoadEnum(GsonLongSerializationPolicy, DEFAULT), JavaUtilCollections_emptyList());
}

GsonGson *new_GsonGson_init() {
  J2OBJC_NEW_IMPL(GsonGson, init)
}

GsonGson *create_GsonGson_init() {
  J2OBJC_CREATE_IMPL(GsonGson, init)
}

void GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonGson *self, GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  NSObject_init(self);
  self->calls_ = new_JavaLangThreadLocal_init();
  self->typeTokenCache_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_(new_JavaUtilHashMap_init());
  self->deserializationContext_ = new_GsonGson_1_initWithGsonGson_(self);
  self->serializationContext_ = new_GsonGson_2_initWithGsonGson_(self);
  self->constructorConstructor_ = new_GsonConstructorConstructor_initWithJavaUtilMap_(instanceCreators);
  self->serializeNulls_ = serializeNulls;
  self->generateNonExecutableJson_ = generateNonExecutableGson;
  self->htmlSafe_ = htmlSafe;
  self->prettyPrinting_ = prettyPrinting;
  id<JavaUtilList> factories = new_JavaUtilArrayList_init();
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, JSON_ELEMENT_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonObjectTypeAdapter, FACTORY)];
  [factories addWithId:excluder];
  [factories addAllWithJavaUtilCollection:typeAdapterFactories];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, INTEGER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BOOLEAN_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BYTE_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, SHORT_FACTORY)];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass longClass], JavaLangLong_class_(), GsonGson_longAdapterWithGsonLongSerializationPolicy_(self, longSerializationPolicy))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass doubleClass], JavaLangDouble_class_(), GsonGson_doubleAdapterWithBoolean_(self, serializeSpecialFloatingPointValues))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass floatClass], JavaLangFloat_class_(), GsonGson_floatAdapterWithBoolean_(self, serializeSpecialFloatingPointValues))];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, NUMBER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CHARACTER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_BUILDER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_BUFFER_FACTORY)];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaMathBigDecimal_class_(), JreLoadStatic(GsonTypeAdapters, BIG_DECIMAL))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaMathBigInteger_class_(), JreLoadStatic(GsonTypeAdapters, BIG_INTEGER))];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, URL_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, URI_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, UUID_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, LOCALE_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, INET_ADDRESS_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BIT_SET_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CALENDAR_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTimeTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonSqlDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, TIMESTAMP_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonArrayTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CLASS_FACTORY)];
  [factories addWithId:new_GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(self->constructorConstructor_)];
  [factories addWithId:new_GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(self->constructorConstructor_, complexMapKeySerialization)];
  [factories addWithId:new_GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(self->constructorConstructor_)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, ENUM_FACTORY)];
  [factories addWithId:new_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_(self->constructorConstructor_, fieldNamingPolicy, excluder)];
  self->factories_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(factories);
}

GsonGson *new_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  J2OBJC_NEW_IMPL(GsonGson, initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_, excluder, fieldNamingPolicy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories)
}

GsonGson *create_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  J2OBJC_CREATE_IMPL(GsonGson, initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_, excluder, fieldNamingPolicy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories)
}

GsonTypeAdapter *GsonGson_doubleAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GsonTypeAdapters, DOUBLE);
  }
  return new_GsonGson_3_initWithGsonGson_(self);
}

GsonTypeAdapter *GsonGson_floatAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GsonTypeAdapters, FLOAT);
  }
  return new_GsonGson_4_initWithGsonGson_(self);
}

void GsonGson_checkValidFloatingPointWithDouble_(GsonGson *self, jdouble value) {
  if (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("D$", value, @" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method."));
  }
}

GsonTypeAdapter *GsonGson_longAdapterWithGsonLongSerializationPolicy_(GsonGson *self, GsonLongSerializationPolicy *longSerializationPolicy) {
  if (longSerializationPolicy == JreLoadEnum(GsonLongSerializationPolicy, DEFAULT)) {
    return JreLoadStatic(GsonTypeAdapters, LONG);
  }
  return new_GsonGson_5_init();
}

GsonJsonWriter *GsonGson_newJsonWriterWithJavaIoWriter_(GsonGson *self, JavaIoWriter *writer) {
  if (self->generateNonExecutableJson_) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:GsonGson_JSON_NON_EXECUTABLE_PREFIX];
  }
  GsonJsonWriter *jsonWriter = new_GsonJsonWriter_initWithJavaIoWriter_(writer);
  if (self->prettyPrinting_) {
    [jsonWriter setIndentWithNSString:@"  "];
  }
  [jsonWriter setSerializeNullsWithBoolean:self->serializeNulls_];
  return jsonWriter;
}

void GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(id obj, GsonJsonReader *reader) {
  GsonGson_initialize();
  @try {
    if (obj != nil && [((GsonJsonReader *) nil_chk(reader)) peek] != JreLoadEnum(GsonJsonToken, END_DOCUMENT)) {
      @throw new_GsonJsonIOException_initWithNSString_(@"JSON document was not fully consumed.");
    }
  }
  @catch (GsonMalformedJsonException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonGson)

@implementation GsonGson_1

- (instancetype)initWithGsonGson:(GsonGson *)outer$ {
  GsonGson_1_initWithGsonGson_(self, outer$);
  return self;
}

- (id)deserializeWithGsonJsonElement:(GsonJsonElement *)json
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  return [this$0_ fromJsonWithGsonJsonElement:json withJavaLangReflectType:typeOfT];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonGson:);
  methods[1].selector = @selector(deserializeWithGsonJsonElement:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonGson;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "deserialize", "LGsonJsonElement;LJavaLangReflectType;", "LGsonJsonParseException;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)TT;", "LGsonGson;" };
  static const J2ObjcClassInfo _GsonGson_1 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, -1, -1, -1 };
  return &_GsonGson_1;
}

@end

void GsonGson_1_initWithGsonGson_(GsonGson_1 *self, GsonGson *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

GsonGson_1 *new_GsonGson_1_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_NEW_IMPL(GsonGson_1, initWithGsonGson_, outer$)
}

GsonGson_1 *create_GsonGson_1_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_CREATE_IMPL(GsonGson_1, initWithGsonGson_, outer$)
}

@implementation GsonGson_2

- (instancetype)initWithGsonGson:(GsonGson *)outer$ {
  GsonGson_2_initWithGsonGson_(self, outer$);
  return self;
}

- (GsonJsonElement *)serializeWithId:(id)src {
  return [this$0_ toJsonTreeWithId:src];
}

- (GsonJsonElement *)serializeWithId:(id)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  return [this$0_ toJsonTreeWithId:src withJavaLangReflectType:typeOfSrc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonGson:);
  methods[1].selector = @selector(serializeWithId:);
  methods[2].selector = @selector(serializeWithId:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonGson;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "serialize", "LNSObject;", "LNSObject;LJavaLangReflectType;", "LGsonGson;" };
  static const J2ObjcClassInfo _GsonGson_2 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 3, -1, -1, -1, -1 };
  return &_GsonGson_2;
}

@end

void GsonGson_2_initWithGsonGson_(GsonGson_2 *self, GsonGson *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

GsonGson_2 *new_GsonGson_2_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_NEW_IMPL(GsonGson_2, initWithGsonGson_, outer$)
}

GsonGson_2 *create_GsonGson_2_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_CREATE_IMPL(GsonGson_2, initWithGsonGson_, outer$)
}

@implementation GsonGson_3

- (instancetype)initWithGsonGson:(GsonGson *)outer$ {
  GsonGson_3_initWithGsonGson_(self, outer$);
  return self;
}

- (JavaLangDouble *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangDouble_valueOfWithDouble_([inArg nextDouble]);
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jdouble doubleValue = [value doubleValue];
  GsonGson_checkValidFloatingPointWithDouble_(this$0_, doubleValue);
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonGson:);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonGson;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "doubleAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_3 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 5, -1, 6, 7, -1 };
  return &_GsonGson_3;
}

@end

void GsonGson_3_initWithGsonGson_(GsonGson_3 *self, GsonGson *outer$) {
  self->this$0_ = outer$;
  GsonTypeAdapter_init(self);
}

GsonGson_3 *new_GsonGson_3_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_NEW_IMPL(GsonGson_3, initWithGsonGson_, outer$)
}

GsonGson_3 *create_GsonGson_3_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_CREATE_IMPL(GsonGson_3, initWithGsonGson_, outer$)
}

@implementation GsonGson_4

- (instancetype)initWithGsonGson:(GsonGson *)outer$ {
  GsonGson_4_initWithGsonGson_(self, outer$);
  return self;
}

- (JavaLangFloat *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangFloat_valueOfWithFloat_((jfloat) [inArg nextDouble]);
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jfloat floatValue = [value floatValue];
  GsonGson_checkValidFloatingPointWithDouble_(this$0_, floatValue);
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithGsonGson:);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LGsonGson;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "floatAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_4 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 5, -1, 6, 7, -1 };
  return &_GsonGson_4;
}

@end

void GsonGson_4_initWithGsonGson_(GsonGson_4 *self, GsonGson *outer$) {
  self->this$0_ = outer$;
  GsonTypeAdapter_init(self);
}

GsonGson_4 *new_GsonGson_4_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_NEW_IMPL(GsonGson_4, initWithGsonGson_, outer$)
}

GsonGson_4 *create_GsonGson_4_initWithGsonGson_(GsonGson *outer$) {
  J2OBJC_CREATE_IMPL(GsonGson_4, initWithGsonGson_, outer$)
}

@implementation GsonGson_5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonGson_5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSNumber *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangLong_valueOfWithLong_([inArg nextLong]);
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSString:[value description]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "longAdapterWithGsonLongSerializationPolicy:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_5 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GsonGson_5;
}

@end

void GsonGson_5_init(GsonGson_5 *self) {
  GsonTypeAdapter_init(self);
}

GsonGson_5 *new_GsonGson_5_init() {
  J2OBJC_NEW_IMPL(GsonGson_5, init)
}

GsonGson_5 *create_GsonGson_5_init() {
  J2OBJC_CREATE_IMPL(GsonGson_5, init)
}

@implementation GsonGson_FutureTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonGson_FutureTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDelegateWithGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter {
  if (delegate_ != nil) {
    @throw new_JavaLangAssertionError_init();
  }
  delegate_ = typeAdapter;
}

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  return [delegate_ readWithGsonJsonReader:inArg];
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  [delegate_ writeWithGsonJsonWriter:outArg withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 5, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDelegateWithGsonTypeAdapter:);
  methods[2].selector = @selector(readWithGsonJsonReader:);
  methods[3].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "setDelegate", "LGsonTypeAdapter;", "(Lcom/google/gson/TypeAdapter<TT;>;)V", "read", "LGsonJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)TT;", "write", "LGsonJsonWriter;LNSObject;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "Lcom/google/gson/TypeAdapter<TT;>;", "LGsonGson;", "<T:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<TT;>;" };
  static const J2ObjcClassInfo _GsonGson_FutureTypeAdapter = { "FutureTypeAdapter", "com.google.gson", ptrTable, methods, fields, 7, 0x8, 4, 1, 11, -1, -1, 12, -1 };
  return &_GsonGson_FutureTypeAdapter;
}

@end

void GsonGson_FutureTypeAdapter_init(GsonGson_FutureTypeAdapter *self) {
  GsonTypeAdapter_init(self);
}

GsonGson_FutureTypeAdapter *new_GsonGson_FutureTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GsonGson_FutureTypeAdapter, init)
}

GsonGson_FutureTypeAdapter *create_GsonGson_FutureTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GsonGson_FutureTypeAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonGson_FutureTypeAdapter)
