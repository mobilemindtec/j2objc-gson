//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/GsonBuilder.java
//

#include "$Gson$Preconditions.h"
#include "DefaultDateTypeAdapter.h"
#include "Excluder.h"
#include "ExclusionStrategy.h"
#include "FieldNamingPolicy.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "GsonBuilder.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InstanceCreator.h"
#include "J2ObjC_source.h"
#include "JsonDeserializer.h"
#include "JsonSerializer.h"
#include "LongSerializationPolicy.h"
#include "TreeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/lang/reflect/Type.h"
#include "java/sql/Date.h"
#include "java/sql/Timestamp.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface GsonGsonBuilder () {
 @public
  GsonExcluder *excluder_;
  GsonLongSerializationPolicy *longSerializationPolicy_;
  id<GsonFieldNamingStrategy> fieldNamingPolicy_;
  id<JavaUtilMap> instanceCreators_;
  id<JavaUtilList> factories_;
  id<JavaUtilList> hierarchyFactories_;
  jboolean serializeNulls_;
  NSString *datePattern_;
  jint dateStyle_;
  jint timeStyle_;
  jboolean complexMapKeySerialization_;
  jboolean serializeSpecialFloatingPointValues_;
  jboolean escapeHtmlChars_;
  jboolean prettyPrinting_;
  jboolean generateNonExecutableJson_;
}

- (void)addTypeAdaptersForDateWithNSString:(NSString *)datePattern
                                   withInt:(jint)dateStyle
                                   withInt:(jint)timeStyle
                          withJavaUtilList:(id<JavaUtilList>)factories;

@end

J2OBJC_FIELD_SETTER(GsonGsonBuilder, excluder_, GsonExcluder *)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, longSerializationPolicy_, GsonLongSerializationPolicy *)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, fieldNamingPolicy_, id<GsonFieldNamingStrategy>)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, instanceCreators_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, factories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, hierarchyFactories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGsonBuilder, datePattern_, NSString *)

__attribute__((unused)) static void GsonGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(GsonGsonBuilder *self, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> factories);

@implementation GsonGsonBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonGsonBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GsonGsonBuilder *)setVersionWithDouble:(jdouble)ignoreVersionsAfter {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) withVersionWithDouble:ignoreVersionsAfter];
  return self;
}

- (GsonGsonBuilder *)excludeFieldsWithModifiersWithIntArray:(IOSIntArray *)modifiers {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) withModifiersWithIntArray:modifiers];
  return self;
}

- (GsonGsonBuilder *)generateNonExecutableJson {
  self->generateNonExecutableJson_ = true;
  return self;
}

- (GsonGsonBuilder *)excludeFieldsWithoutExposeAnnotation {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) excludeFieldsWithoutExposeAnnotation];
  return self;
}

- (GsonGsonBuilder *)serializeNulls {
  self->serializeNulls_ = true;
  return self;
}

- (GsonGsonBuilder *)enableComplexMapKeySerialization {
  complexMapKeySerialization_ = true;
  return self;
}

- (GsonGsonBuilder *)disableInnerClassSerialization {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) disableInnerClassSerialization];
  return self;
}

- (GsonGsonBuilder *)setLongSerializationPolicyWithGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)serializationPolicy {
  self->longSerializationPolicy_ = serializationPolicy;
  return self;
}

- (GsonGsonBuilder *)setFieldNamingPolicyWithGsonFieldNamingPolicy:(GsonFieldNamingPolicy *)namingConvention {
  self->fieldNamingPolicy_ = namingConvention;
  return self;
}

- (GsonGsonBuilder *)setFieldNamingStrategyWithGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingStrategy {
  self->fieldNamingPolicy_ = fieldNamingStrategy;
  return self;
}

- (GsonGsonBuilder *)setExclusionStrategiesWithGsonExclusionStrategyArray:(IOSObjectArray *)strategies {
  {
    IOSObjectArray *a__ = strategies;
    id<GsonExclusionStrategy> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GsonExclusionStrategy> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GsonExclusionStrategy> strategy = *b__++;
      excluder_ = [((GsonExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGsonExclusionStrategy:strategy withBoolean:true withBoolean:true];
    }
  }
  return self;
}

- (GsonGsonBuilder *)addSerializationExclusionStrategyWithGsonExclusionStrategy:(id<GsonExclusionStrategy>)strategy {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGsonExclusionStrategy:strategy withBoolean:true withBoolean:false];
  return self;
}

- (GsonGsonBuilder *)addDeserializationExclusionStrategyWithGsonExclusionStrategy:(id<GsonExclusionStrategy>)strategy {
  excluder_ = [((GsonExcluder *) nil_chk(excluder_)) withExclusionStrategyWithGsonExclusionStrategy:strategy withBoolean:false withBoolean:true];
  return self;
}

- (GsonGsonBuilder *)setPrettyPrinting {
  prettyPrinting_ = true;
  return self;
}

- (GsonGsonBuilder *)disableHtmlEscaping {
  self->escapeHtmlChars_ = false;
  return self;
}

- (GsonGsonBuilder *)setDateFormatWithNSString:(NSString *)pattern {
  self->datePattern_ = pattern;
  return self;
}

- (GsonGsonBuilder *)setDateFormatWithInt:(jint)style {
  self->dateStyle_ = style;
  self->datePattern_ = nil;
  return self;
}

- (GsonGsonBuilder *)setDateFormatWithInt:(jint)dateStyle
                                  withInt:(jint)timeStyle {
  self->dateStyle_ = dateStyle;
  self->timeStyle_ = timeStyle;
  self->datePattern_ = nil;
  return self;
}

- (GsonGsonBuilder *)registerTypeAdapterWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                         withId:(id)typeAdapter {
  Gson_Gson_Preconditions_checkArgumentWithBoolean_([GsonJsonSerializer_class_() isInstance:typeAdapter] || [GsonJsonDeserializer_class_() isInstance:typeAdapter] || [GsonInstanceCreator_class_() isInstance:typeAdapter] || [typeAdapter isKindOfClass:[GsonTypeAdapter class]]);
  if ([GsonInstanceCreator_class_() isInstance:typeAdapter]) {
    (void) [((id<JavaUtilMap>) nil_chk(instanceCreators_)) putWithId:type withId:(id<GsonInstanceCreator>) cast_check(typeAdapter, GsonInstanceCreator_class_())];
  }
  if ([GsonJsonSerializer_class_() isInstance:typeAdapter] || [GsonJsonDeserializer_class_() isInstance:typeAdapter]) {
    GsonTypeToken *typeToken = GsonTypeToken_getWithJavaLangReflectType_(type);
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GsonTreeTypeAdapter_newFactoryWithMatchRawTypeWithGsonTypeToken_withId_(typeToken, typeAdapter)];
  }
  if ([typeAdapter isKindOfClass:[GsonTypeAdapter class]]) {
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GsonTypeAdapters_newFactoryWithGsonTypeToken_withGsonTypeAdapter_(GsonTypeToken_getWithJavaLangReflectType_(type), (GsonTypeAdapter *) cast_chk(typeAdapter, [GsonTypeAdapter class]))];
  }
  return self;
}

- (GsonGsonBuilder *)registerTypeAdapterFactoryWithGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)factory {
  [((id<JavaUtilList>) nil_chk(factories_)) addWithId:factory];
  return self;
}

- (GsonGsonBuilder *)registerTypeHierarchyAdapterWithIOSClass:(IOSClass *)baseType
                                                       withId:(id)typeAdapter {
  Gson_Gson_Preconditions_checkArgumentWithBoolean_([GsonJsonSerializer_class_() isInstance:typeAdapter] || [GsonJsonDeserializer_class_() isInstance:typeAdapter] || [typeAdapter isKindOfClass:[GsonTypeAdapter class]]);
  if ([GsonJsonDeserializer_class_() isInstance:typeAdapter] || [GsonJsonSerializer_class_() isInstance:typeAdapter]) {
    [((id<JavaUtilList>) nil_chk(hierarchyFactories_)) addWithInt:0 withId:GsonTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(baseType, typeAdapter)];
  }
  if ([typeAdapter isKindOfClass:[GsonTypeAdapter class]]) {
    [((id<JavaUtilList>) nil_chk(factories_)) addWithId:GsonTypeAdapters_newTypeHierarchyFactoryWithIOSClass_withGsonTypeAdapter_(baseType, (GsonTypeAdapter *) cast_chk(typeAdapter, [GsonTypeAdapter class]))];
  }
  return self;
}

- (GsonGsonBuilder *)serializeSpecialFloatingPointValues {
  self->serializeSpecialFloatingPointValues_ = true;
  return self;
}

- (GsonGson *)create {
  id<JavaUtilList> factories = new_JavaUtilArrayList_init();
  [factories addAllWithJavaUtilCollection:self->factories_];
  JavaUtilCollections_reverseWithJavaUtilList_(factories);
  [factories addAllWithJavaUtilCollection:self->hierarchyFactories_];
  GsonGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(self, datePattern_, dateStyle_, timeStyle_, factories);
  return new_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(excluder_, fieldNamingPolicy_, instanceCreators_, serializeNulls_, complexMapKeySerialization_, generateNonExecutableJson_, escapeHtmlChars_, prettyPrinting_, serializeSpecialFloatingPointValues_, longSerializationPolicy_, factories);
}

- (void)addTypeAdaptersForDateWithNSString:(NSString *)datePattern
                                   withInt:(jint)dateStyle
                                   withInt:(jint)timeStyle
                          withJavaUtilList:(id<JavaUtilList>)factories {
  GsonGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(self, datePattern, dateStyle, timeStyle, factories);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x81, 2, 3, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x81, 10, 11, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 15, 18, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "LGsonGsonBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonGson;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, 28, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setVersionWithDouble:);
  methods[2].selector = @selector(excludeFieldsWithModifiersWithIntArray:);
  methods[3].selector = @selector(generateNonExecutableJson);
  methods[4].selector = @selector(excludeFieldsWithoutExposeAnnotation);
  methods[5].selector = @selector(serializeNulls);
  methods[6].selector = @selector(enableComplexMapKeySerialization);
  methods[7].selector = @selector(disableInnerClassSerialization);
  methods[8].selector = @selector(setLongSerializationPolicyWithGsonLongSerializationPolicy:);
  methods[9].selector = @selector(setFieldNamingPolicyWithGsonFieldNamingPolicy:);
  methods[10].selector = @selector(setFieldNamingStrategyWithGsonFieldNamingStrategy:);
  methods[11].selector = @selector(setExclusionStrategiesWithGsonExclusionStrategyArray:);
  methods[12].selector = @selector(addSerializationExclusionStrategyWithGsonExclusionStrategy:);
  methods[13].selector = @selector(addDeserializationExclusionStrategyWithGsonExclusionStrategy:);
  methods[14].selector = @selector(setPrettyPrinting);
  methods[15].selector = @selector(disableHtmlEscaping);
  methods[16].selector = @selector(setDateFormatWithNSString:);
  methods[17].selector = @selector(setDateFormatWithInt:);
  methods[18].selector = @selector(setDateFormatWithInt:withInt:);
  methods[19].selector = @selector(registerTypeAdapterWithJavaLangReflectType:withId:);
  methods[20].selector = @selector(registerTypeAdapterFactoryWithGsonTypeAdapterFactory:);
  methods[21].selector = @selector(registerTypeHierarchyAdapterWithIOSClass:withId:);
  methods[22].selector = @selector(serializeSpecialFloatingPointValues);
  methods[23].selector = @selector(create);
  methods[24].selector = @selector(addTypeAdaptersForDateWithNSString:withInt:withInt:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "excluder_", "LGsonExcluder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "longSerializationPolicy_", "LGsonLongSerializationPolicy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldNamingPolicy_", "LGsonFieldNamingStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "instanceCreators_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "factories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "hierarchyFactories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "serializeNulls_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "datePattern_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dateStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "complexMapKeySerialization_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serializeSpecialFloatingPointValues_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtmlChars_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prettyPrinting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generateNonExecutableJson_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setVersion", "D", "excludeFieldsWithModifiers", "[I", "setLongSerializationPolicy", "LGsonLongSerializationPolicy;", "setFieldNamingPolicy", "LGsonFieldNamingPolicy;", "setFieldNamingStrategy", "LGsonFieldNamingStrategy;", "setExclusionStrategies", "[LGsonExclusionStrategy;", "addSerializationExclusionStrategy", "LGsonExclusionStrategy;", "addDeserializationExclusionStrategy", "setDateFormat", "LNSString;", "I", "II", "registerTypeAdapter", "LJavaLangReflectType;LNSObject;", "registerTypeAdapterFactory", "LGsonTypeAdapterFactory;", "registerTypeHierarchyAdapter", "LIOSClass;LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/Object;)Lcom/google/gson/GsonBuilder;", "addTypeAdaptersForDate", "LNSString;IILJavaUtilList;", "(Ljava/lang/String;IILjava/util/List<Lcom/google/gson/TypeAdapterFactory;>;)V", "Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;", "Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;" };
  static const J2ObjcClassInfo _GsonGsonBuilder = { "GsonBuilder", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 25, 15, -1, -1, -1, -1, -1 };
  return &_GsonGsonBuilder;
}

@end

void GsonGsonBuilder_init(GsonGsonBuilder *self) {
  NSObject_init(self);
  self->excluder_ = JreLoadStatic(GsonExcluder, DEFAULT);
  self->longSerializationPolicy_ = JreLoadEnum(GsonLongSerializationPolicy, DEFAULT);
  self->fieldNamingPolicy_ = JreLoadEnum(GsonFieldNamingPolicy, IDENTITY);
  self->instanceCreators_ = new_JavaUtilHashMap_init();
  self->factories_ = new_JavaUtilArrayList_init();
  self->hierarchyFactories_ = new_JavaUtilArrayList_init();
  self->dateStyle_ = JavaTextDateFormat_DEFAULT;
  self->timeStyle_ = JavaTextDateFormat_DEFAULT;
  self->escapeHtmlChars_ = true;
}

GsonGsonBuilder *new_GsonGsonBuilder_init() {
  J2OBJC_NEW_IMPL(GsonGsonBuilder, init)
}

GsonGsonBuilder *create_GsonGsonBuilder_init() {
  J2OBJC_CREATE_IMPL(GsonGsonBuilder, init)
}

void GsonGsonBuilder_addTypeAdaptersForDateWithNSString_withInt_withInt_withJavaUtilList_(GsonGsonBuilder *self, NSString *datePattern, jint dateStyle, jint timeStyle, id<JavaUtilList> factories) {
  GsonDefaultDateTypeAdapter *dateTypeAdapter;
  if (datePattern != nil && ![@"" isEqual:[datePattern java_trim]]) {
    dateTypeAdapter = new_GsonDefaultDateTypeAdapter_initWithNSString_(datePattern);
  }
  else if (dateStyle != JavaTextDateFormat_DEFAULT && timeStyle != JavaTextDateFormat_DEFAULT) {
    dateTypeAdapter = new_GsonDefaultDateTypeAdapter_initWithInt_withInt_(dateStyle, timeStyle);
  }
  else {
    return;
  }
  [((id<JavaUtilList>) nil_chk(factories)) addWithId:GsonTreeTypeAdapter_newFactoryWithGsonTypeToken_withId_(GsonTypeToken_getWithIOSClass_(JavaUtilDate_class_()), dateTypeAdapter)];
  [factories addWithId:GsonTreeTypeAdapter_newFactoryWithGsonTypeToken_withId_(GsonTypeToken_getWithIOSClass_(JavaSqlTimestamp_class_()), dateTypeAdapter)];
  [factories addWithId:GsonTreeTypeAdapter_newFactoryWithGsonTypeToken_withId_(GsonTypeToken_getWithIOSClass_(JavaSqlDate_class_()), dateTypeAdapter)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonGsonBuilder)
