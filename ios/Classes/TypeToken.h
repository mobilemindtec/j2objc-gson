//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/TypeToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TypeToken")
#ifdef RESTRICT_TypeToken
#define INCLUDE_ALL_TypeToken 0
#else
#define INCLUDE_ALL_TypeToken 1
#endif
#undef RESTRICT_TypeToken

#if !defined (GsonTypeToken_) && (INCLUDE_ALL_TypeToken || defined(INCLUDE_GsonTypeToken))
#define GsonTypeToken_

@class IOSClass;
@class IOSObjectArray;
@protocol JavaLangReflectType;

@interface GsonTypeToken : NSObject {
 @public
  IOSClass *rawType_;
  id<JavaLangReflectType> type_;
  jint hashCode_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

+ (GsonTypeToken *)getWithIOSClass:(IOSClass *)type;

+ (GsonTypeToken *)getWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (GsonTypeToken *)getArrayWithJavaLangReflectType:(id<JavaLangReflectType>)componentType;

+ (GsonTypeToken *)getParameterizedWithJavaLangReflectType:(id<JavaLangReflectType>)rawType
                              withJavaLangReflectTypeArray:(IOSObjectArray *)typeArguments;

- (IOSClass *)getRawType;

- (id<JavaLangReflectType>)getType;

- (NSUInteger)hash;

- (jboolean)isAssignableFromWithIOSClass:(IOSClass *)cls;

- (jboolean)isAssignableFromWithJavaLangReflectType:(id<JavaLangReflectType>)from;

- (jboolean)isAssignableFromWithGsonTypeToken:(GsonTypeToken *)token;

- (NSString *)description;

#pragma mark Protected

- (instancetype)init;

#pragma mark Package-Private

- (instancetype)initWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)getSuperclassTypeParameterWithIOSClass:(IOSClass *)subclass;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonTypeToken)

J2OBJC_FIELD_SETTER(GsonTypeToken, rawType_, IOSClass *)
J2OBJC_FIELD_SETTER(GsonTypeToken, type_, id<JavaLangReflectType>)

FOUNDATION_EXPORT void GsonTypeToken_init(GsonTypeToken *self);

FOUNDATION_EXPORT GsonTypeToken *new_GsonTypeToken_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonTypeToken *create_GsonTypeToken_init(void);

FOUNDATION_EXPORT void GsonTypeToken_initWithJavaLangReflectType_(GsonTypeToken *self, id<JavaLangReflectType> type);

FOUNDATION_EXPORT GsonTypeToken *new_GsonTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonTypeToken *create_GsonTypeToken_initWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> GsonTypeToken_getSuperclassTypeParameterWithIOSClass_(IOSClass *subclass);

FOUNDATION_EXPORT GsonTypeToken *GsonTypeToken_getWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT GsonTypeToken *GsonTypeToken_getWithIOSClass_(IOSClass *type);

FOUNDATION_EXPORT GsonTypeToken *GsonTypeToken_getParameterizedWithJavaLangReflectType_withJavaLangReflectTypeArray_(id<JavaLangReflectType> rawType, IOSObjectArray *typeArguments);

FOUNDATION_EXPORT GsonTypeToken *GsonTypeToken_getArrayWithJavaLangReflectType_(id<JavaLangReflectType> componentType);

J2OBJC_TYPE_LITERAL_HEADER(GsonTypeToken)

@compatibility_alias ComGoogleGsonReflectTypeToken GsonTypeToken;

#endif

#pragma pop_macro("INCLUDE_ALL_TypeToken")
