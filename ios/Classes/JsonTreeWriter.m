//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/JsonTreeWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JsonArray.h"
#include "JsonElement.h"
#include "JsonNull.h"
#include "JsonObject.h"
#include "JsonPrimitive.h"
#include "JsonTreeWriter.h"
#include "JsonWriter.h"
#include "java/io/IOException.h"
#include "java/io/Writer.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface GsonJsonTreeWriter () {
 @public
  id<JavaUtilList> stack_JsonTreeWriter_;
  NSString *pendingName_;
  GsonJsonElement *product_;
}

- (GsonJsonElement *)peek;

- (void)putWithGsonJsonElement:(GsonJsonElement *)value;

@end

J2OBJC_FIELD_SETTER(GsonJsonTreeWriter, stack_JsonTreeWriter_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonJsonTreeWriter, pendingName_, NSString *)
J2OBJC_FIELD_SETTER(GsonJsonTreeWriter, product_, GsonJsonElement *)

inline JavaIoWriter *GsonJsonTreeWriter_get_UNWRITABLE_WRITER(void);
static JavaIoWriter *GsonJsonTreeWriter_UNWRITABLE_WRITER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonJsonTreeWriter, UNWRITABLE_WRITER, JavaIoWriter *)

inline GsonJsonPrimitive *GsonJsonTreeWriter_get_SENTINEL_CLOSED(void);
static GsonJsonPrimitive *GsonJsonTreeWriter_SENTINEL_CLOSED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonJsonTreeWriter, SENTINEL_CLOSED, GsonJsonPrimitive *)

__attribute__((unused)) static GsonJsonElement *GsonJsonTreeWriter_peek(GsonJsonTreeWriter *self);

__attribute__((unused)) static void GsonJsonTreeWriter_putWithGsonJsonElement_(GsonJsonTreeWriter *self, GsonJsonElement *value);

@interface GsonJsonTreeWriter_1 : JavaIoWriter

- (instancetype)init;

- (void)writeWithCharArray:(IOSCharArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)counter;

- (void)flush;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonTreeWriter_1)

__attribute__((unused)) static void GsonJsonTreeWriter_1_init(GsonJsonTreeWriter_1 *self);

__attribute__((unused)) static GsonJsonTreeWriter_1 *new_GsonJsonTreeWriter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonJsonTreeWriter_1 *create_GsonJsonTreeWriter_1_init(void);

J2OBJC_INITIALIZED_DEFN(GsonJsonTreeWriter)

@implementation GsonJsonTreeWriter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonJsonTreeWriter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (GsonJsonElement *)get {
  if (![((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Expected one JSON element but was ", stack_JsonTreeWriter_));
  }
  return product_;
}

- (GsonJsonElement *)peek {
  return GsonJsonTreeWriter_peek(self);
}

- (void)putWithGsonJsonElement:(GsonJsonElement *)value {
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, value);
}

- (GsonJsonWriter *)beginArray {
  GsonJsonArray *array = new_GsonJsonArray_init();
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, array);
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) addWithId:array];
  return self;
}

- (GsonJsonWriter *)endArray {
  if ([((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) isEmpty] || pendingName_ != nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  GsonJsonElement *element = GsonJsonTreeWriter_peek(self);
  if ([element isKindOfClass:[GsonJsonArray class]]) {
    (void) [stack_JsonTreeWriter_ removeWithInt:[stack_JsonTreeWriter_ size] - 1];
    return self;
  }
  @throw new_JavaLangIllegalStateException_init();
}

- (GsonJsonWriter *)beginObject {
  GsonJsonObject *object = new_GsonJsonObject_init();
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, object);
  [((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) addWithId:object];
  return self;
}

- (GsonJsonWriter *)endObject {
  if ([((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) isEmpty] || pendingName_ != nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  GsonJsonElement *element = GsonJsonTreeWriter_peek(self);
  if ([element isKindOfClass:[GsonJsonObject class]]) {
    (void) [stack_JsonTreeWriter_ removeWithInt:[stack_JsonTreeWriter_ size] - 1];
    return self;
  }
  @throw new_JavaLangIllegalStateException_init();
}

- (GsonJsonWriter *)nameWithNSString:(NSString *)name {
  if ([((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) isEmpty] || pendingName_ != nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  GsonJsonElement *element = GsonJsonTreeWriter_peek(self);
  if ([element isKindOfClass:[GsonJsonObject class]]) {
    pendingName_ = name;
    return self;
  }
  @throw new_JavaLangIllegalStateException_init();
}

- (GsonJsonWriter *)valueWithNSString:(NSString *)value {
  if (value == nil) {
    return [self nullValue];
  }
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, new_GsonJsonPrimitive_initWithNSString_(value));
  return self;
}

- (GsonJsonWriter *)nullValue {
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, JreLoadStatic(GsonJsonNull, INSTANCE));
  return self;
}

- (GsonJsonWriter *)valueWithBoolean:(jboolean)value {
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, new_GsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean_valueOfWithBoolean_(value)));
  return self;
}

- (GsonJsonWriter *)valueWithDouble:(jdouble)value {
  if (![self isLenient] && (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"JSON forbids NaN and infinities: ", value));
  }
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, new_GsonJsonPrimitive_initWithNSNumber_(JavaLangDouble_valueOfWithDouble_(value)));
  return self;
}

- (GsonJsonWriter *)valueWithLong:(jlong)value {
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, new_GsonJsonPrimitive_initWithNSNumber_(JavaLangLong_valueOfWithLong_(value)));
  return self;
}

- (GsonJsonWriter *)valueWithNSNumber:(NSNumber *)value {
  if (value == nil) {
    return [self nullValue];
  }
  if (![self isLenient]) {
    jdouble d = [value doubleValue];
    if (JavaLangDouble_isNaNWithDouble_(d) || JavaLangDouble_isInfiniteWithDouble_(d)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"JSON forbids NaN and infinities: ", value));
    }
  }
  GsonJsonTreeWriter_putWithGsonJsonElement_(self, new_GsonJsonPrimitive_initWithNSNumber_(value));
  return self;
}

- (void)flush {
}

- (void)close {
  if (![((id<JavaUtilList>) nil_chk(stack_JsonTreeWriter_)) isEmpty]) {
    @throw new_JavaIoIOException_initWithNSString_(@"Incomplete document");
  }
  [stack_JsonTreeWriter_ addWithId:GsonJsonTreeWriter_SENTINEL_CLOSED];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 5, 6, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 5, 7, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 5, 8, 2, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 5, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(peek);
  methods[3].selector = @selector(putWithGsonJsonElement:);
  methods[4].selector = @selector(beginArray);
  methods[5].selector = @selector(endArray);
  methods[6].selector = @selector(beginObject);
  methods[7].selector = @selector(endObject);
  methods[8].selector = @selector(nameWithNSString:);
  methods[9].selector = @selector(valueWithNSString:);
  methods[10].selector = @selector(nullValue);
  methods[11].selector = @selector(valueWithBoolean:);
  methods[12].selector = @selector(valueWithDouble:);
  methods[13].selector = @selector(valueWithLong:);
  methods[14].selector = @selector(valueWithNSNumber:);
  methods[15].selector = @selector(flush);
  methods[16].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNWRITABLE_WRITER", "LJavaIoWriter;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "SENTINEL_CLOSED", "LGsonJsonPrimitive;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "stack_JsonTreeWriter_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, 12, -1, 13, -1 },
    { "pendingName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "product_", "LGsonJsonElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "put", "LGsonJsonElement;", "LJavaIoIOException;", "name", "LNSString;", "value", "Z", "D", "J", "LNSNumber;", &GsonJsonTreeWriter_UNWRITABLE_WRITER, &GsonJsonTreeWriter_SENTINEL_CLOSED, "stack", "Ljava/util/List<Lcom/google/gson/JsonElement;>;" };
  static const J2ObjcClassInfo _GsonJsonTreeWriter = { "JsonTreeWriter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 17, 5, -1, -1, -1, -1, -1 };
  return &_GsonJsonTreeWriter;
}

+ (void)initialize {
  if (self == [GsonJsonTreeWriter class]) {
    GsonJsonTreeWriter_UNWRITABLE_WRITER = new_GsonJsonTreeWriter_1_init();
    GsonJsonTreeWriter_SENTINEL_CLOSED = new_GsonJsonPrimitive_initWithNSString_(@"closed");
    J2OBJC_SET_INITIALIZED(GsonJsonTreeWriter)
  }
}

@end

void GsonJsonTreeWriter_init(GsonJsonTreeWriter *self) {
  GsonJsonWriter_initWithJavaIoWriter_(self, GsonJsonTreeWriter_UNWRITABLE_WRITER);
  self->stack_JsonTreeWriter_ = new_JavaUtilArrayList_init();
  self->product_ = JreLoadStatic(GsonJsonNull, INSTANCE);
}

GsonJsonTreeWriter *new_GsonJsonTreeWriter_init() {
  J2OBJC_NEW_IMPL(GsonJsonTreeWriter, init)
}

GsonJsonTreeWriter *create_GsonJsonTreeWriter_init() {
  J2OBJC_CREATE_IMPL(GsonJsonTreeWriter, init)
}

GsonJsonElement *GsonJsonTreeWriter_peek(GsonJsonTreeWriter *self) {
  return [((id<JavaUtilList>) nil_chk(self->stack_JsonTreeWriter_)) getWithInt:[self->stack_JsonTreeWriter_ size] - 1];
}

void GsonJsonTreeWriter_putWithGsonJsonElement_(GsonJsonTreeWriter *self, GsonJsonElement *value) {
  if (self->pendingName_ != nil) {
    if (![((GsonJsonElement *) nil_chk(value)) isJsonNull] || [self getSerializeNulls]) {
      GsonJsonObject *object = (GsonJsonObject *) cast_chk(GsonJsonTreeWriter_peek(self), [GsonJsonObject class]);
      [((GsonJsonObject *) nil_chk(object)) addWithNSString:self->pendingName_ withGsonJsonElement:value];
    }
    self->pendingName_ = nil;
  }
  else if ([((id<JavaUtilList>) nil_chk(self->stack_JsonTreeWriter_)) isEmpty]) {
    self->product_ = value;
  }
  else {
    GsonJsonElement *element = GsonJsonTreeWriter_peek(self);
    if ([element isKindOfClass:[GsonJsonArray class]]) {
      [((GsonJsonArray *) nil_chk(((GsonJsonArray *) cast_chk(element, [GsonJsonArray class])))) addWithGsonJsonElement:value];
    }
    else {
      @throw new_JavaLangIllegalStateException_init();
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonTreeWriter)

@implementation GsonJsonTreeWriter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  GsonJsonTreeWriter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)writeWithCharArray:(IOSCharArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)counter {
  @throw new_JavaLangAssertionError_init();
}

- (void)flush {
  @throw new_JavaLangAssertionError_init();
}

- (void)close {
  @throw new_JavaLangAssertionError_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(flush);
  methods[3].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "write", "[CII", "LJavaIoIOException;", "LGsonJsonTreeWriter;" };
  static const J2ObjcClassInfo _GsonJsonTreeWriter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 3, -1, -1, -1, -1 };
  return &_GsonJsonTreeWriter_1;
}

@end

void GsonJsonTreeWriter_1_init(GsonJsonTreeWriter_1 *self) {
  JavaIoWriter_init(self);
}

GsonJsonTreeWriter_1 *new_GsonJsonTreeWriter_1_init() {
  J2OBJC_NEW_IMPL(GsonJsonTreeWriter_1, init)
}

GsonJsonTreeWriter_1 *create_GsonJsonTreeWriter_1_init() {
  J2OBJC_CREATE_IMPL(GsonJsonTreeWriter_1, init)
}
