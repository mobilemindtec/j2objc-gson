//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/Gson.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Gson")
#ifdef RESTRICT_Gson
#define INCLUDE_ALL_Gson 0
#else
#define INCLUDE_ALL_Gson 1
#endif
#undef RESTRICT_Gson

#if !defined (GsonGson_) && (INCLUDE_ALL_Gson || defined(INCLUDE_GsonGson))
#define GsonGson_

@class GsonExcluder;
@class GsonJsonElement;
@class GsonJsonReader;
@class GsonJsonWriter;
@class GsonLongSerializationPolicy;
@class GsonTypeAdapter;
@class GsonTypeToken;
@class IOSClass;
@class JavaIoReader;
@protocol GsonFieldNamingStrategy;
@protocol GsonJsonDeserializationContext;
@protocol GsonJsonSerializationContext;
@protocol GsonTypeAdapterFactory;
@protocol JavaLangAppendable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface GsonGson : NSObject {
 @public
  id<GsonJsonDeserializationContext> deserializationContext_;
  id<GsonJsonSerializationContext> serializationContext_;
}

+ (jboolean)DEFAULT_JSON_NON_EXECUTABLE;

#pragma mark Public

- (instancetype)init;

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
                     withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
          withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithGsonJsonReader:(GsonJsonReader *)reader
         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
                  withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
       withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (id)fromJsonWithNSString:(NSString *)json
              withIOSClass:(IOSClass *)classOfT;

- (id)fromJsonWithNSString:(NSString *)json
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT;

- (GsonTypeAdapter *)getAdapterWithIOSClass:(IOSClass *)type;

- (GsonTypeAdapter *)getAdapterWithGsonTypeToken:(GsonTypeToken *)type;

- (GsonTypeAdapter *)getDelegateAdapterWithGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast
                                                withGsonTypeToken:(GsonTypeToken *)type;

- (NSString *)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement;

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
           withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
               withGsonJsonWriter:(GsonJsonWriter *)writer;

- (NSString *)toJsonWithId:(id)src;

- (void)toJsonWithId:(id)src
withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (NSString *)toJsonWithId:(id)src
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
withJavaLangAppendable:(id<JavaLangAppendable>)writer;

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
  withGsonJsonWriter:(GsonJsonWriter *)writer;

- (GsonJsonElement *)toJsonTreeWithId:(id)src;

- (GsonJsonElement *)toJsonTreeWithId:(id)src
              withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithGsonExcluder:(GsonExcluder *)excluder
         withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingPolicy
                     withJavaUtilMap:(id<JavaUtilMap>)instanceCreators
                         withBoolean:(jboolean)serializeNulls
                         withBoolean:(jboolean)complexMapKeySerialization
                         withBoolean:(jboolean)generateNonExecutableGson
                         withBoolean:(jboolean)htmlSafe
                         withBoolean:(jboolean)prettyPrinting
                         withBoolean:(jboolean)serializeSpecialFloatingPointValues
     withGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy
                    withJavaUtilList:(id<JavaUtilList>)typeAdapterFactories;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson)

J2OBJC_FIELD_SETTER(GsonGson, deserializationContext_, id<GsonJsonDeserializationContext>)
J2OBJC_FIELD_SETTER(GsonGson, serializationContext_, id<GsonJsonSerializationContext>)

inline jboolean GsonGson_get_DEFAULT_JSON_NON_EXECUTABLE(void);
#define GsonGson_DEFAULT_JSON_NON_EXECUTABLE false
J2OBJC_STATIC_FIELD_CONSTANT(GsonGson, DEFAULT_JSON_NON_EXECUTABLE, jboolean)

FOUNDATION_EXPORT void GsonGson_init(GsonGson *self);

FOUNDATION_EXPORT GsonGson *new_GsonGson_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson *create_GsonGson_init(void);

FOUNDATION_EXPORT void GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonGson *self, GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories);

FOUNDATION_EXPORT GsonGson *new_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson *create_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingPolicy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories);

J2OBJC_TYPE_LITERAL_HEADER(GsonGson)

@compatibility_alias ComGoogleGsonGson GsonGson;

#endif

#if !defined (GsonGson_FutureTypeAdapter_) && (INCLUDE_ALL_Gson || defined(INCLUDE_GsonGson_FutureTypeAdapter))
#define GsonGson_FutureTypeAdapter_

#define RESTRICT_TypeAdapter 1
#define INCLUDE_GsonTypeAdapter 1
#include "TypeAdapter.h"

@class GsonJsonReader;
@class GsonJsonWriter;

@interface GsonGson_FutureTypeAdapter : GsonTypeAdapter

#pragma mark Public

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)setDelegateWithGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_FutureTypeAdapter)

FOUNDATION_EXPORT void GsonGson_FutureTypeAdapter_init(GsonGson_FutureTypeAdapter *self);

FOUNDATION_EXPORT GsonGson_FutureTypeAdapter *new_GsonGson_FutureTypeAdapter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonGson_FutureTypeAdapter *create_GsonGson_FutureTypeAdapter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(GsonGson_FutureTypeAdapter)

#endif

#pragma pop_macro("INCLUDE_ALL_Gson")
