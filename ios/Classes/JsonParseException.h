//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./build/j2objc/java/JsonParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonParseException")
#ifdef RESTRICT_JsonParseException
#define INCLUDE_ALL_JsonParseException 0
#else
#define INCLUDE_ALL_JsonParseException 1
#endif
#undef RESTRICT_JsonParseException

#if !defined (GsonJsonParseException_) && (INCLUDE_ALL_JsonParseException || defined(INCLUDE_GsonJsonParseException))
#define GsonJsonParseException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

@interface GsonJsonParseException : JavaLangRuntimeException

+ (jlong)serialVersionUID;

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)msg;

- (instancetype)initWithNSString:(NSString *)msg
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonParseException)

inline jlong GsonJsonParseException_get_serialVersionUID(void);
#define GsonJsonParseException_serialVersionUID -4086729973971783390LL
J2OBJC_STATIC_FIELD_CONSTANT(GsonJsonParseException, serialVersionUID, jlong)

FOUNDATION_EXPORT void GsonJsonParseException_initWithNSString_(GsonJsonParseException *self, NSString *msg);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void GsonJsonParseException_initWithNSString_withJavaLangThrowable_(GsonJsonParseException *self, NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT void GsonJsonParseException_initWithJavaLangThrowable_(GsonJsonParseException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonParseException)

@compatibility_alias ComGoogleGsonJsonParseException GsonJsonParseException;

#endif

#pragma pop_macro("INCLUDE_ALL_JsonParseException")
